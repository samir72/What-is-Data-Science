bin2Max <- min(x) + 2*binWidth
bin3Max <- Inf
xDiscretized <- rep(NA, length(x))
xDiscretized
xDiscretized[bin1Min < x & x <= bin1Max] <- "Low"
xDiscretized[bin1Max < x & x <= bin2Max] <- "Medium"
xDiscretized[bin2Max < x & x <= bin3Max] <- "High"
xDiscretized
xDiscretized[bin1Max < x & x <= bin2Max]
rm(list=ls())
x <- c(81, 3, 3, 4, 4, 5, 5, 5, 5, 5, 5, 50, 6, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 9, 12, 24, 24, 25)
range <- max(x) - min(x)
binWidth <- range / 3
bin1Min <- -Inf
bin1Max <- min(x) + binWidth
bin2Max <- min(x) + 2*binWidth
bin3Max <- Inf
xDiscretized <- rep(NA, length(x))
xDiscretized
xDiscretized[bin1Min < x & x <= bin1Max] <- "Low"
xDiscretized[bin1Max < x & x <= bin2Max] <- "Medium"
xDiscretized[bin2Max < x & x <= bin3Max] <- "High"
xDiscretized
rm(list=ls())
x <- c(81, 3, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 9, 12, 24, 24, 25)
range <- max(x) - min(x)
binWidth <- range / 3
bin1Min <- -Inf
bin1Max <- min(x) + binWidth
bin2Max <- min(x) + 2*binWidth
bin3Max <- Inf
xDiscretized <- rep(NA, length(x))
xDiscretized
xDiscretized[bin1Min < x & x <= bin1Max] <- "Low"
xDiscretized[bin1Max < x & x <= bin2Max] <- "Medium"
xDiscretized[bin2Max < x & x <= bin3Max] <- "High"
xDiscretized
source('~/UW/Data Science Certificate/What is Data Science/Lesson 01/Assignments/Assignment_.R')
rm(list=ls())
x <- c(81, 3, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 9, 12, 24, 24, 25)
range <- max(x) - min(x)
binWidth <- range / 3
bin1Min <- -Inf
bin1Max <- min(x) + binWidth
bin2Max <- min(x) + 2*binWidth
bin3Max <- Inf
xDiscretized <- rep(NA, length(x))
xDiscretized
xDiscretized[bin1Min < x & x <= bin1Max] <- "Kids"
xDiscretized[bin1Max < x & x <= bin2Max] <- "Older Siblings"
xDiscretized[bin2Max < x & x <= bin3Max] <- "Teachers"
xDiscretized
rm(list=ls())
x <- c(81, 3, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 9, 12, 24, 24, 25)
range <- max(x) - min(x)
binWidth <- range / 3
bin1Min <- -Inf
bin1Max <- min(x) + binWidth
bin2Max <- min(x) + 1.5*binWidth
bin3Max <- Inf
xDiscretized <- rep(NA, length(x))
xDiscretized
xDiscretized[bin1Min < x & x <= bin1Max] <- "Kids"
xDiscretized[bin1Max < x & x <= bin2Max] <- "Older Siblings"
xDiscretized[bin2Max < x & x <= bin3Max] <- "Teachers"
xDiscretized
x <- c(-3, 3, 15, 3, 15, 18, -9, -27, 13, 15, 6)
quantileBinMax(x, 4)
x <- c(81, 3, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 9, 12, 24, 24, 25)
sort(x)
rm(list=ls())
x <- c(81, 3, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 9, 12, 24, 24, 25)
sort(x)
# [1] 3  3  4  4  5  5  5  5  5  5  5  6  6  6  6  6  7  7  7  7  8  8  9 12 24 24 25 81
#    <-----------------------------------------------|----------------------|--------|-->
# Kindergarteners:  3  3  4  4  5  5  5  5  5  5  5  6  6  6  6  6
veryLowMin <- -Inf
VeryLowMax <- 6
# Older Siblings:  7  7  7  7  8  8  9 12
LowMax <- 12
# Teachers:  24 24 25
HighMax <- 25
# Grandfather:  81
VeryHighMax <- Inf
xDiscretized <- x
xDiscretized[veryLowMin < x & x <=  VeryLowMax] <- "Kinder"
xDiscretized[VeryLowMax < x & x <=      LowMax] <- "olderSib"
xDiscretized[LowMax     < x & x <=     HighMax] <- "Teacher"
xDiscretized[HighMax    < x & x <= VeryHighMax] <- "Grandfather"
#x <- c("Low", "Low", "Very High", "Low", "Very High", "Very High", "Very Low", "Very Low", "High", "Very High", "High")
xDiscretized
source('~/UW/Data Science Certificate/What is Data Science/Lesson 01/Assignments/Assignment_.R')
x <- c(81, 3, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 9, 12, 24, 24, 25)
sort(x)
# [1] 3  3  4  4  5  5  5  5  5  5  5  6  6  6  6  6  7  7  7  7  8  8  9 12 24 24 25 81
#    <-----------------------------------------------|----------------------|--------|-->
# Kindergarteners:  3  3  4  4  5  5  5  5  5  5  5  6  6  6  6  6
veryLowMin <- -Inf
VeryLowMax <- 6
# Older Siblings:  7  7  7  7  8  8  9 12
LowMax <- 12
# Teachers:  24 24 25
HighMax <- 25
# Grandfather:  81
VeryHighMax <- Inf
xDiscretized <- x
xDiscretized[veryLowMin < x & x <=  VeryLowMax] <- "Kinder"
xDiscretized[VeryLowMax < x & x <=      LowMax] <- "olderSib"
xDiscretized[LowMax     < x & x <=     HighMax] <- "Teacher"
xDiscretized[HighMax    < x & x <= VeryHighMax] <- "Grandfather"
#x <- c("Low", "Low", "Very High", "Low", "Very High", "Very High", "Very Low", "Very Low", "High", "Very High", "High")
xDiscretized
source('~/UW/Data Science Certificate/What is Data Science/Lesson 01/Assignments/Assignment_.R')
#Clear workspace
rm(list=ls())
# assign a url to variable "url"
url <- "http://archive.ics.uci.edu/ml/machine-learning-databases/00225/Indian%20Liver%20Patient%20Dataset%20(ILPD).csv"
#4 Download the dataset
ILPD <- read.csv(url, header=FALSE, stringsAsFactors=FALSE)
#4 Create headers.
headers <- c("Age Age of the patient", "Gender Gender of the patient","TB Total Bilirubin","DB Direct Bilirubin","Alkphos Alkaline Phosphotase","Sgpt Alamine Aminotransferase","Sgot Aspartate Aminotransferase","TP Total Protiens","ALB Albumin","A/G Ratio Albumin and Globulin Ratio","Selector field used to split the data into two sets (labeled by the experts)")
#4 Add headers to the dataset.
names(ILPD) <- headers
#5 view first 6 rows
head(ILPD)
#6 determine the standard mean,median and SD.
#Loop to calculate SD, Mean and median of all numeric columns.
#Second column of gender contains non-numeric values hence has been skipped for these calculations.
NumCols <- ncol(ILPD) # Get number of columns for the loop.
for (i in 1:NumCols) {
if (is.character(ILPD[, i])) {
cat("Column # ", i, "is being skipped as its non numeric","\n" )
next
}
SD <- sd(ILPD[, i],na.rm=TRUE)
cat("SD of Column # ", i, "is ", SD, "\n" )
ME <- mean(ILPD[, i],na.rm=TRUE)
cat("Mean of Column # ", i, "is ", ME, "\n" )
MED <- median(ILPD[, i],na.rm=TRUE)
cat("Median of Column # ", i, "is ", MED, "\n" )
}
#7 Histograms for all numerical values.
for (i in 1:NumCols) {
if (is.character(ILPD[, i])) {
next
}
hist(ILPD[,i], col=rgb(0,1,0,.5))
}
#8 Removing all non-numeric columns from the data frame.
NumCols <- ncol(ILPD)
j <- 1
while (j <= NumCols) {
#      browser()
if (is.character(ILPD[, j])) {
cat("Column # ", j, "is being removed for plotting as it contains non numeric data","\n" )
ILPD[j] <- list(NULL)
NumCols <- ncol(ILPD)
}
j = j +1
}
#8 Plot ILPD object.
plot(ILPD)
plot(ILPD[,1])
plot(ILPD[,2])
plot(ILPD[1,2])
plot(ILPD[,10])
plot(ILPD[,10],ILPD[,1])
plot(ILPD[,1],ILPD[,10])
plot(ILPD[,1],ILPD[,2])
plot(ILPD[,1],ILPD[,3])
plot(ILPD[,1],ILPD[,4])
plot(ILPD[,1],ILPD[,5])
plot(ILPD[,1],ILPD[,6])
plot(ILPD[,1],ILPD[,7])
plot(ILPD[,1],ILPD[,8])
plot(ILPD[,1],ILPD[,9])
plot(ILPD[,1],ILPD[,10])
plot(ILPD[,1],ILPD[,2],ILPD[,10])
plot(ILPD[,1],ILPD[,2],ILPD[,10])
plot(ILPD[,1],ILPD[,2])
plot(ILPD)
source('~/UW/Data Science Certificate/What is Data Science/Lesson 01/Assignments/Assignment_.R')
rm(list=ls())
# assign a url to variable "url"
url <- "http://archive.ics.uci.edu/ml/machine-learning-databases/00225/Indian%20Liver%20Patient%20Dataset%20(ILPD).csv"
#4 Download the dataset
ILPD <- read.csv(url, header=FALSE, stringsAsFactors=FALSE)
#4 Create headers.
headers <- c("Age Age of the patient", "Gender Gender of the patient","TB Total Bilirubin","DB Direct Bilirubin","Alkphos Alkaline Phosphotase","Sgpt Alamine Aminotransferase","Sgot Aspartate Aminotransferase","TP Total Protiens","ALB Albumin","A/G Ratio Albumin and Globulin Ratio","Selector field used to split the data into two sets (labeled by the experts)")
#4 Add headers to the dataset.
names(ILPD) <- headers
#5 view first 6 rows
head(ILPD)
rm(list=ls())
# assign a url to variable "url"
url <- "http://archive.ics.uci.edu/ml/machine-learning-databases/00225/Indian%20Liver%20Patient%20Dataset%20(ILPD).csv"
#4 Download the dataset
ILPD <- read.csv(url, header=FALSE, stringsAsFactors=FALSE)
#4 Create headers.
headers <- c("Age Age of the patient", "Gender Gender of the patient","TB Total Bilirubin","DB Direct Bilirubin","Alkphos Alkaline Phosphotase","Sgpt Alamine Aminotransferase","Sgot Aspartate Aminotransferase","TP Total Protiens","ALB Albumin","A/G Ratio Albumin and Globulin Ratio","Selector field used to split the data into two sets (labeled by the experts)")
#4 Add headers to the dataset.
names(ILPD) <- headers
#5 view first 6 rows
head(ILPD)
ILPD$Alkphos Alkaline Phosphotase <- as.numeric(ILPD$Alkphos Alkaline Phosphotase)
ILPD$Alkphos <- as.numeric(ILPD$Alkphos)
ILPD$Gender <- NULL
mms.df <- data.frame(mean =sapply(ILPD,mean,na.rm=TRUE),
median = sapply(ILPD,median,na.rm=TRUE),
sd = sapply(ILPD,sd,na.rm=TRUE))
mms.df <- data.frame(mean =sapply(ILPD,mean,na.rm=TRUE),
median = sapply(ILPD,median,na.rm=TRUE),
sd = sapply(ILPD,sd,na.rm=TRUE))
source('~/UW/Data Science Certificate/What is Data Science/Lesson 01/Assignments/Assignment_.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 01/Assignments/Assignment_.R')
#Clear workspace
#Clear workspace
rm(list=ls())
# assign a url to variable "url"
url <- "http://archive.ics.uci.edu/ml/machine-learning-databases/00225/Indian%20Liver%20Patient%20Dataset%20(ILPD).csv"
#4 Download the dataset
ILPD <- read.csv(url, header=FALSE, stringsAsFactors=FALSE)
#4 Create headers.
headers <- c("Age Age of the patient", "Gender Gender of the patient","TB Total Bilirubin","DB Direct Bilirubin","Alkphos Alkaline Phosphotase","Sgpt Alamine Aminotransferase","Sgot Aspartate Aminotransferase","TP Total Protiens","ALB Albumin","A/G Ratio Albumin and Globulin Ratio","Selector field used to split the data into two sets (labeled by the experts)")
#4 Add headers to the dataset.
names(ILPD) <- headers
#5 view first 6 rows
head(ILPD)
#6 determine the standard mean,median and SD.
#Loop to calculate SD, Mean and median of all numeric columns.
#Second column of gender contains non-numeric values hence has been skipped for these calculations.
NumCols <- ncol(ILPD) # Get number of columns for the loop.
for (i in 1:NumCols) {
if (is.character(ILPD[, i])) {
cat("Column # ", i, "is being skipped as its non numeric","\n" )
next
}
SD <- sd(ILPD[, i],na.rm=TRUE)
cat("SD of Column # ", i, "is ", SD, "\n" )
ME <- mean(ILPD[, i],na.rm=TRUE)
cat("Mean of Column # ", i, "is ", ME, "\n" )
MED <- median(ILPD[, i],na.rm=TRUE)
cat("Median of Column # ", i, "is ", MED, "\n" )
}
#7 Histograms for all numerical values.
for (i in 1:NumCols) {
if (is.character(ILPD[, i])) {
next
}
hist(ILPD[,i], col=rgb(0,1,0,.5))
}
#8 Removing all non-numeric columns from the data frame.
NumCols <- ncol(ILPD)
j <- 1
while (j <= NumCols) {
#      browser()
if (is.character(ILPD[, j])) {
cat("Column # ", j, "is being removed for plotting as it contains non numeric data","\n" )
ILPD[j] <- list(NULL)
NumCols <- ncol(ILPD)
}
j = j +1
}
#8 Plot ILPD object.
plot(ILPD)
#9a How can you tell if a vector contains continuous numbers or binary data?
# Binary data appear as dots in a straight line, vector # 10(Selector) is a good example.
#9b Which two vectors are most strongly correlated?
# TB and DB seems to be strongly correlated as the plot appears in an approximately 45 degree line.
#9c Give an example of two vectors that have little correlation
# Age & Selector have no correlation.
#10 Remove Outlier:
#Clear workspace
rm(list=ls())
x <- c(1, -1, -1, 1, 1, 17, -3, 1, 1, 3)
highLimit <- mean(x) + 2*sd(x)
lowLimit <- mean(x) - 2*sd(x)
goodFlag <- (x < highLimit) & (x > lowLimit)
x[goodFlag]
x
x <- x[goodFlag]
x
#cat("Outlier has been removed : ", x,"\n" )
#11 Relabel this:
#Clear workspace
rm(list=ls())
x <- c('BS', 'MS', 'PhD', 'HS', 'Bachelors', 'Masters', 'High School', 'MS', 'BS', 'MS')
# All Bachelors should be BS
x[x == "Bachelors"] <- "BS"
x
# All Masters should be MS
x[x == "Masters"] <- "MS"
x
# All High School should be HS
x[x == "High School"] <- "HS"
x
#cat("Relabelled vector : ", x,"\n" )
#12 Min-Max Normalization:
#Clear workspace
rm(list=ls())
x <- c(1, -1, -1, 1, 1, 17, -3, 1, 1, 3)
y <- 1000*x
a <- min(x)
b <- max(x) - min(x)
normalized <- (x - a) / b
normalized
a <- min(y)
b <- max(y) - min(y)
normalized <- (y - a) / b
normalized
#cat("Normalized vector through Min-Max method : ", normalized,"\n" )
#13 z-Score Normalization
a <- mean(x)
b <- sd(x)
normalized <- (x - a) / b
normalized
a <- mean(y)
b <- sd(y)
normalized <- (y - a) / b
normalized
#cat("Normalized vector through Z-Score method : ", normalized,"\n" )
#14 Binarize
#Clear workspace
rm(list=ls())
x <- c('Red', 'Green', 'Blue', 'Green', 'Blue', 'Blue', 'Red', 'Blue', 'Green', 'Blue')
isRed <- x == 'Red'
isGreen <- x == 'Green'
isBlue <- x == 'Blue'
isRed
isGreen
isBlue
# You can cast T/F into 1/0
isRed <- as.numeric(isRed)
isGreen <- as.numeric(isGreen)
isBlue <- as.numeric(isBlue)
# Better Presentation:
isRed; isGreen; isBlue
# Or, as a data frame
data.frame(isRed, isGreen, isBlue)
#cat("Binarized numeric data for Red: ", isRed,"\n" )
#cat("Binarized numeric data for Blue: ", isBlue,"\n" )
#cat("Binarized numeric data for Green: ", isGreen,"\n" )
#15 Discretization into 3 bins
#Clear workspace
rm(list=ls())
x <- c(81, 3, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 9, 12, 24, 24, 25)
range <- max(x) - min(x)
binWidth <- range / 3
bin1Min <- -Inf
bin1Max <- min(x) + binWidth
bin2Max <- min(x) + 2*binWidth
bin3Max <- Inf
xDiscretized <- rep(NA, length(x))
xDiscretized
xDiscretized[bin1Min < x & x <= bin1Max] <- "Low"
xDiscretized[bin1Max < x & x <= bin2Max] <- "Medium"
xDiscretized[bin2Max < x & x <= bin3Max] <- "High"
xDiscretized
#16 Discretization into 3 bins using equalization technique
#Clear workspace
rm(list=ls())
x <- c(81, 3, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 9, 12, 24, 24, 25)
sort(x)
# [1] 3  3  4  4  5  5  5  5  5  5  5  6  6  6  6  6  7  7  7  7  8  8  9 12 24 24 25 81
#    <-----------------------------------------------|----------------------|--------|-->
# Kindergarteners:  3  3  4  4  5  5  5  5  5  5  5  6  6  6  6  6
veryLowMin <- -Inf
VeryLowMax <- 6
# Older Siblings:  7  7  7  7  8  8  9 12
LowMax <- 12
# Teachers:  24 24 25
HighMax <- 25
# Grandfather:  81
VeryHighMax <- Inf
xDiscretized <- x
xDiscretized[veryLowMin < x & x <=  VeryLowMax] <- "Kinder"
xDiscretized[VeryLowMax < x & x <=      LowMax] <- "olderSib"
xDiscretized[LowMax     < x & x <=     HighMax] <- "Teacher"
xDiscretized[HighMax    < x & x <= VeryHighMax] <- "Grandfather"
xDiscretized
?max.col
?min
?min.col
?max.col
install.packages("sqldf")
library(sqldf)
?data.frame
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
Table1
?sample
?data.frame
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
Table1
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
install.packages("tcltk")
install.packages("tcltk")
?tcltk
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
install.packages("sqldf")
library(sqldf)
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
library(tcltk)
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
?sqldf
?subset
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
?identical
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
JoinClause2 <- sqldf('select * from Table3 left outer join Table1 ON Table1.Alpha=Table3.Alpha')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
?sprintf
i <- sprintf("select * from %s left outer join %f ON %s.%g=%f.%g", "Table1", "Table3", "Alpha")
i <- sprintf("select * from %s left outer join %s ON %s.%s=%s.%s", "Table1", "Table3", "Alpha")
i <- sprintf("select * from %s left outer join %s ON %s.%s=%s.%s", "Table1", "Table3", "Alpha")
i <- sprintf("second %2$1.0f, first %1$5.2f, third %3$1.0f", pi, 2, 3)
i
i <- sprintf("%s is %f feet tall\n", "Sven", 7.1)
i
i <- sprintf("%s %s is %f feet tall\n", "Sven", "Eight", 7.1)
i
i <- sprintf("select * from %s left outer join %s ON %s.%s=%s.%s", "Table1", "Table3", "Table1.Alpha", "Table3.Alpha")
i <- sprintf("select * from %s left outer join %s ON %s=%s", "Table1", "Table3", "Table1.Alpha", "Table3.Alpha")
i
i <- sprintf("select * from %s left outer join %s ON %s.%s=%s.%s", "Table1", "Table3", "Table1","Alpha", "Table3","Alpha")
i
LeftOuterJoinSQL1 <- sprintf("select * from %s left outer join %s ON %s.%s=%s.%s", "Table1", "Table3", "Table1","Alpha", "Table3","Alpha")
LeftOuterJoin1 <- sqldf(LeftOuterJoinSQL1)
LeftOuterJoinSQL2 <- sprintf("select * from %s left outer join %s ON %s.%s=%s.%s", "Table3", "Table1", "Table1","Alpha", "Table3","Alpha")
LeftOuterJoin2 <- sqldf(LeftOuterJoinSQL2)
FullJoin <- rbind(LeftOuterJoinSQL1, LeftOuterJoinSQL2)
LeftOuterJoinSQL1 <- sprintf("select * from %s left outer join %s ON %s.%s=%s.%s", "Table1", "Table3", "Table1","Alpha", "Table3","Alpha")
LeftOuterJoin1 <- sqldf(LeftOuterJoinSQL1)
LeftOuterJoinSQL2 <- sprintf("select * from %s left outer join %s ON %s.%s=%s.%s", "Table3", "Table1", "Table1","Alpha", "Table3","Alpha")
LeftOuterJoin2 <- sqldf(LeftOuterJoinSQL2)
FullJoin <- rbind(LeftOuterJoin1, LeftOuterJoin2)
View(FullJoin)
View(FullJoin)
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
getwd()
setwd("C:/Users/rr657c/Documents/UW/Data Science Certificate/What is Data Science/Lesson 05")
getwd()
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5_Function.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/Assignment#5.R')

while (j <= NumCols) {
#      browser()
if (is.character(ILPD[, j])) {
cat("Column # ", j, "is being removed for plotting as it contains non numeric data","\n" )
ILPD[j] <- list(NULL)
NumCols <- ncol(ILPD)
}
j = j +1
}
#8 Plot ILPD object.
plot(ILPD)
plot(ILPD[,1])
plot(ILPD[,2])
plot(ILPD[1,2])
plot(ILPD[,10])
plot(ILPD[,10],ILPD[,1])
plot(ILPD[,1],ILPD[,10])
plot(ILPD[,1],ILPD[,2])
plot(ILPD[,1],ILPD[,3])
plot(ILPD[,1],ILPD[,4])
plot(ILPD[,1],ILPD[,5])
plot(ILPD[,1],ILPD[,6])
plot(ILPD[,1],ILPD[,7])
plot(ILPD[,1],ILPD[,8])
plot(ILPD[,1],ILPD[,9])
plot(ILPD[,1],ILPD[,10])
plot(ILPD[,1],ILPD[,2],ILPD[,10])
plot(ILPD[,1],ILPD[,2],ILPD[,10])
plot(ILPD[,1],ILPD[,2])
plot(ILPD)
source('~/UW/Data Science Certificate/What is Data Science/Lesson 01/Assignments/Assignment_.R')
rm(list=ls())
# assign a url to variable "url"
url <- "http://archive.ics.uci.edu/ml/machine-learning-databases/00225/Indian%20Liver%20Patient%20Dataset%20(ILPD).csv"
#4 Download the dataset
ILPD <- read.csv(url, header=FALSE, stringsAsFactors=FALSE)
#4 Create headers.
headers <- c("Age Age of the patient", "Gender Gender of the patient","TB Total Bilirubin","DB Direct Bilirubin","Alkphos Alkaline Phosphotase","Sgpt Alamine Aminotransferase","Sgot Aspartate Aminotransferase","TP Total Protiens","ALB Albumin","A/G Ratio Albumin and Globulin Ratio","Selector field used to split the data into two sets (labeled by the experts)")
#4 Add headers to the dataset.
names(ILPD) <- headers
#5 view first 6 rows
head(ILPD)
rm(list=ls())
# assign a url to variable "url"
url <- "http://archive.ics.uci.edu/ml/machine-learning-databases/00225/Indian%20Liver%20Patient%20Dataset%20(ILPD).csv"
#4 Download the dataset
ILPD <- read.csv(url, header=FALSE, stringsAsFactors=FALSE)
#4 Create headers.
headers <- c("Age Age of the patient", "Gender Gender of the patient","TB Total Bilirubin","DB Direct Bilirubin","Alkphos Alkaline Phosphotase","Sgpt Alamine Aminotransferase","Sgot Aspartate Aminotransferase","TP Total Protiens","ALB Albumin","A/G Ratio Albumin and Globulin Ratio","Selector field used to split the data into two sets (labeled by the experts)")
#4 Add headers to the dataset.
names(ILPD) <- headers
#5 view first 6 rows
head(ILPD)
ILPD$Alkphos Alkaline Phosphotase <- as.numeric(ILPD$Alkphos Alkaline Phosphotase)
ILPD$Alkphos <- as.numeric(ILPD$Alkphos)
ILPD$Gender <- NULL
mms.df <- data.frame(mean =sapply(ILPD,mean,na.rm=TRUE),
median = sapply(ILPD,median,na.rm=TRUE),
sd = sapply(ILPD,sd,na.rm=TRUE))
mms.df <- data.frame(mean =sapply(ILPD,mean,na.rm=TRUE),
median = sapply(ILPD,median,na.rm=TRUE),
sd = sapply(ILPD,sd,na.rm=TRUE))
source('~/UW/Data Science Certificate/What is Data Science/Lesson 01/Assignments/Assignment_.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 01/Assignments/Assignment_.R')
#Clear workspace
#Clear workspace
rm(list=ls())
# assign a url to variable "url"
url <- "http://archive.ics.uci.edu/ml/machine-learning-databases/00225/Indian%20Liver%20Patient%20Dataset%20(ILPD).csv"
#4 Download the dataset
ILPD <- read.csv(url, header=FALSE, stringsAsFactors=FALSE)
#4 Create headers.
headers <- c("Age Age of the patient", "Gender Gender of the patient","TB Total Bilirubin","DB Direct Bilirubin","Alkphos Alkaline Phosphotase","Sgpt Alamine Aminotransferase","Sgot Aspartate Aminotransferase","TP Total Protiens","ALB Albumin","A/G Ratio Albumin and Globulin Ratio","Selector field used to split the data into two sets (labeled by the experts)")
#4 Add headers to the dataset.
names(ILPD) <- headers
#5 view first 6 rows
head(ILPD)
#6 determine the standard mean,median and SD.
#Loop to calculate SD, Mean and median of all numeric columns.
#Second column of gender contains non-numeric values hence has been skipped for these calculations.
NumCols <- ncol(ILPD) # Get number of columns for the loop.
for (i in 1:NumCols) {
if (is.character(ILPD[, i])) {
cat("Column # ", i, "is being skipped as its non numeric","\n" )
next
}
SD <- sd(ILPD[, i],na.rm=TRUE)
cat("SD of Column # ", i, "is ", SD, "\n" )
ME <- mean(ILPD[, i],na.rm=TRUE)
cat("Mean of Column # ", i, "is ", ME, "\n" )
MED <- median(ILPD[, i],na.rm=TRUE)
cat("Median of Column # ", i, "is ", MED, "\n" )
}
#7 Histograms for all numerical values.
for (i in 1:NumCols) {
if (is.character(ILPD[, i])) {
next
}
hist(ILPD[,i], col=rgb(0,1,0,.5))
}
#8 Removing all non-numeric columns from the data frame.
NumCols <- ncol(ILPD)
j <- 1
while (j <= NumCols) {
#      browser()
if (is.character(ILPD[, j])) {
cat("Column # ", j, "is being removed for plotting as it contains non numeric data","\n" )
ILPD[j] <- list(NULL)
NumCols <- ncol(ILPD)
}
j = j +1
}
#8 Plot ILPD object.
plot(ILPD)
#9a How can you tell if a vector contains continuous numbers or binary data?
# Binary data appear as dots in a straight line, vector # 10(Selector) is a good example.
#9b Which two vectors are most strongly correlated?
# TB and DB seems to be strongly correlated as the plot appears in an approximately 45 degree line.
#9c Give an example of two vectors that have little correlation
# Age & Selector have no correlation.
#10 Remove Outlier:
#Clear workspace
rm(list=ls())
x <- c(1, -1, -1, 1, 1, 17, -3, 1, 1, 3)
highLimit <- mean(x) + 2*sd(x)
lowLimit <- mean(x) - 2*sd(x)
goodFlag <- (x < highLimit) & (x > lowLimit)
x[goodFlag]
x
x <- x[goodFlag]
x
#cat("Outlier has been removed : ", x,"\n" )
#11 Relabel this:
#Clear workspace
rm(list=ls())
x <- c('BS', 'MS', 'PhD', 'HS', 'Bachelors', 'Masters', 'High School', 'MS', 'BS', 'MS')
# All Bachelors should be BS
x[x == "Bachelors"] <- "BS"
x
# All Masters should be MS
x[x == "Masters"] <- "MS"
x
# All High School should be HS
x[x == "High School"] <- "HS"
x
#cat("Relabelled vector : ", x,"\n" )
#12 Min-Max Normalization:
#Clear workspace
rm(list=ls())
x <- c(1, -1, -1, 1, 1, 17, -3, 1, 1, 3)
y <- 1000*x
a <- min(x)
b <- max(x) - min(x)
normalized <- (x - a) / b
normalized
a <- min(y)
b <- max(y) - min(y)
normalized <- (y - a) / b
normalized
#cat("Normalized vector through Min-Max method : ", normalized,"\n" )
#13 z-Score Normalization
a <- mean(x)
b <- sd(x)
normalized <- (x - a) / b
normalized
a <- mean(y)
b <- sd(y)
normalized <- (y - a) / b
normalized
#cat("Normalized vector through Z-Score method : ", normalized,"\n" )
#14 Binarize
#Clear workspace
rm(list=ls())
x <- c('Red', 'Green', 'Blue', 'Green', 'Blue', 'Blue', 'Red', 'Blue', 'Green', 'Blue')
isRed <- x == 'Red'
isGreen <- x == 'Green'
isBlue <- x == 'Blue'
isRed
isGreen
isBlue
# You can cast T/F into 1/0
isRed <- as.numeric(isRed)
isGreen <- as.numeric(isGreen)
isBlue <- as.numeric(isBlue)
# Better Presentation:
isRed; isGreen; isBlue
# Or, as a data frame
data.frame(isRed, isGreen, isBlue)
#cat("Binarized numeric data for Red: ", isRed,"\n" )
#cat("Binarized numeric data for Blue: ", isBlue,"\n" )
#cat("Binarized numeric data for Green: ", isGreen,"\n" )
#15 Discretization into 3 bins
#Clear workspace
rm(list=ls())
x <- c(81, 3, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 9, 12, 24, 24, 25)
range <- max(x) - min(x)
binWidth <- range / 3
bin1Min <- -Inf
bin1Max <- min(x) + binWidth
bin2Max <- min(x) + 2*binWidth
bin3Max <- Inf
xDiscretized <- rep(NA, length(x))
xDiscretized
xDiscretized[bin1Min < x & x <= bin1Max] <- "Low"
xDiscretized[bin1Max < x & x <= bin2Max] <- "Medium"
xDiscretized[bin2Max < x & x <= bin3Max] <- "High"
xDiscretized
#16 Discretization into 3 bins using equalization technique
#Clear workspace
rm(list=ls())
x <- c(81, 3, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 9, 12, 24, 24, 25)
sort(x)
# [1] 3  3  4  4  5  5  5  5  5  5  5  6  6  6  6  6  7  7  7  7  8  8  9 12 24 24 25 81
#    <-----------------------------------------------|----------------------|--------|-->
# Kindergarteners:  3  3  4  4  5  5  5  5  5  5  5  6  6  6  6  6
veryLowMin <- -Inf
VeryLowMax <- 6
# Older Siblings:  7  7  7  7  8  8  9 12
LowMax <- 12
# Teachers:  24 24 25
HighMax <- 25
# Grandfather:  81
VeryHighMax <- Inf
xDiscretized <- x
xDiscretized[veryLowMin < x & x <=  VeryLowMax] <- "Kinder"
xDiscretized[VeryLowMax < x & x <=      LowMax] <- "olderSib"
xDiscretized[LowMax     < x & x <=     HighMax] <- "Teacher"
xDiscretized[HighMax    < x & x <= VeryHighMax] <- "Grandfather"
xDiscretized
?max.col
?min
?min.col
?max.col
x <- 10
f1 <- function(x) {
function() {
x + 10
}
}
f1(1)()
f1
f1(11)
f1(11)()
f1 <- function(x) {
function() {
x + 10
}
}
f1(1)()
f1 <- function(x) {
function() {
x + 10
}
}
f1(1)()
f1
f1()
funs <- Filter(is.function, objs)
cat("\014")
objs <- mget(ls("package:base"), inherits = TRUE)
funs <- Filter(is.function, objs)
print(objs)
# Clear objects from Memory
rm(list=ls())
# Clear Console:
cat("\014")
objs <- mget(ls("package:base"), inherits = TRUE)
print(objs)
funs <- Filter(is.function, objs)
funs <- Filter(is.function, objs)
?mget
ls("package:base")
?-.Date
x <- -.Date
?-.Date
-.Date
-.Date(1,2)
-.Date(1,2)
?date
date()
Sys.Date()
Sys.time()
date()
?rm
list = ls()
list
rm(list = ls())
?cat
f <- function(x) {
f <- function(x) {
f <- function(x) {
x ^ 2
}
f(x) + 1
}
f(x) * 2
}
f(10)
source('~/UW/Data Science Certificate/What is Data Science/Lesson 06/TestOuterJoin.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 06/TestOuterJoin.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 06/TestOuterJoin.R')
?warning
#Clear Workspace
rm(list=ls())
# Clear Console:
cat("\014")
#!/usr/bin/env Rscript
# tryCatch.Rscript -- experiments with tryCatch
# Get any arguments
arguments <- commandArgs(trailingOnly=TRUE)
a <- arguments[1]
# Define a division function that can issue warnings and errors
myDivide <- function(d, a) {
if (a == 'warning') {
return_value <- 'myDivide warning result'
warning("myDivide warning message")
} else if (a == 'error') {
return_value <- 'myDivide error result'
stop("myDivide error message")
} else {
return_value = d / as.numeric(a)
}
return(return_value)
}
# Evalute the desired series of expressions inside of tryCatch
result <- tryCatch({
b <- 2
c <- b^2
d <- c+2
if (a == 'suppress-warnings') {
e <- suppressWarnings(myDivide(d,a))
} else {
e <- myDivide(d,a) # 6/a
}
f <- e + 100
}, warning = function(war) {
# warning handler picks up where error was generated
print(paste("MY_WARNING:  ",war))
b <- "changing 'b' inside the warning handler has no effect"
e <- myDivide(d,0.1) # =60
f <- e + 100
return(f)
}, error = function(err) {
# error handler picks up where error was generated
print(paste("MY_ERROR:  ",err))
b <- "changing 'b' inside the error handler has no effect"
e <- myDivide(d,0.01) # =600
f <- e + 100
return(f)
}, finally = {
print(paste("a =",a))
print(paste("b =",b))
print(paste("c =",c))
print(paste("d =",d))
# NOTE:  Finally is evaluated in the context of of the inital
# NOTE:  tryCatch block and 'e' will not exist if a warning
# NOTE:  or error occurred.
#print(paste("e =",e))
}) # END tryCatch
print(paste("result =",result))
#Clear Workspace
rm(list=ls())
# Clear Console:
cat("\014")
arguments <- commandArgs(trailingOnly=TRUE)
a <- arguments[1]
# Define a division function that can issue warnings and errors
myDivide <- function(d, a) {
if (a == 'warning') {
return_value <- 'myDivide warning result'
warning("myDivide warning message")
} else if (a == 'error') {
return_value <- 'myDivide error result'
stop("myDivide error message")
} else {
return_value = d / as.numeric(a)
}
return(return_value)
}
# Evalute the desired series of expressions inside of tryCatch
result <- tryCatch({
b <- 2
c <- b^2
d <- c+2
if (a == 'suppress-warnings') {
e <- suppressWarnings(myDivide(d,a))
} else {
e <- myDivide(d,a) # 6/a
}
f <- e + 100
}, warning = function(war) {
# warning handler picks up where error was generated
print(paste("MY_WARNING:  ",war))
b <- "changing 'b' inside the warning handler has no effect"
e <- myDivide(d,0.1) # =60
f <- e + 100
return(f)
}, error = function(err) {
# error handler picks up where error was generated
print(paste("MY_ERROR:  ",err))
b <- "changing 'b' inside the error handler has no effect"
e <- myDivide(d,0.01) # =600
f <- e + 100
return(f)
}, finally = {
print(paste("a =",a))
print(paste("b =",b))
print(paste("c =",c))
print(paste("d =",d))
# NOTE:  Finally is evaluated in the context of of the inital
# NOTE:  tryCatch block and 'e' will not exist if a warning
# NOTE:  or error occurred.
#print(paste("e =",e))
}) # END tryCatch
?stop
?suppressWarnings
?try
?tryCatch
source('~/UW/Data Science Certificate/What is Data Science/Utility R Files/tryCatchFunction.R')
setwd("C:\\Users\\rr657c\\Documents\\UW\\Data Science Certificate\\What is Data Science\\Utility R Files")
tryCatchFunction.R 1
tryCatchFunction.R
getwd()
./tryCatchFunction.R 1
#!/usr/bin/env Rscript
# tryCatch.Rscript -- experiments with tryCatch
# Get any arguments
arguments <- commandArgs(trailingOnly=TRUE)
a <- arguments[1]
# Define a division function that can issue warnings and errors
myDivide <- function(d, a) {
if (a == 'warning') {
return_value <- 'myDivide warning result'
warning("myDivide warning message")
} else if (a == 'error') {
return_value <- 'myDivide error result'
stop("myDivide error message")
} else {
return_value = d / as.numeric(a)
}
return(return_value)
}
# Evalute the desired series of expressions inside of tryCatch
result <- tryCatch({
b <- 2
c <- b^2
d <- c+2
if (a == 'suppress-warnings') {
e <- suppressWarnings(myDivide(d,a))
} else {
e <- myDivide(d,a) # 6/a
}
f <- e + 100
}, warning = function(war) {
# warning handler picks up where error was generated
print(paste("MY_WARNING:  ",war))
b <- "changing 'b' inside the warning handler has no effect"
e <- myDivide(d,0.1) # =60
f <- e + 100
return(f)
}, error = function(err) {
# error handler picks up where error was generated
print(paste("MY_ERROR:  ",err))
b <- "changing 'b' inside the error handler has no effect"
e <- myDivide(d,0.01) # =600
f <- e + 100
return(f)
}, finally = {
print(paste("a =",a))
print(paste("b =",b))
print(paste("c =",c))
print(paste("d =",d))
# NOTE:  Finally is evaluated in the context of of the inital
# NOTE:  tryCatch block and 'e' will not exist if a warning
# NOTE:  or error occurred.
#print(paste("e =",e))
}) # END tryCatch
print(paste("result =",result))
./tryCatchFunction.R '1'
source('~/UW/Data Science Certificate/What is Data Science/Utility R Files/tryCatchFunction.R')
#Clear Workspace
rm(list=ls())
# Clear Console:
cat("\014")
source('~/UW/Data Science Certificate/What is Data Science/Utility R Files/tryCatchFunction.R')
source('~/UW/Data Science Certificate/What is Data Science/Utility R Files/tryCatchFunction.R')
source('~/UW/Data Science Certificate/What is Data Science/Utility R Files/tryCatchFunction.R')
source('~/UW/Data Science Certificate/What is Data Science/Utility R Files/tryCatchFunction.R')
source('~/UW/Data Science Certificate/What is Data Science/Utility R Files/tryCatchFunction.R')
source('~/UW/Data Science Certificate/What is Data Science/Utility R Files/tryCatchFunction.R')
source('~/UW/Data Science Certificate/What is Data Science/Utility R Files/tryCatchFunction.R')
source('~/UW/Data Science Certificate/What is Data Science/Utility R Files/tryCatchFunction.R')
?commandArgs
source('~/UW/Data Science Certificate/What is Data Science/Utility R Files/tryCatchFunction.R')
tryCatchFunction.R 1
tryCatchFunction.R '1'
tryCatchFunction.R "1"
source('~/UW/Data Science Certificate/What is Data Science/Utility R Files/tryCatchFunction.R')
tryCatchFunction.R "1"
tryCatchFunction.R 1
tryCatchFunction.R
getwd()
setwd("C:\\Users\\rr657c\\Documents\\UW\\Data Science Certificate\\What is Data Science\\Utility R Files")
chmod +x tryCatchFunction.R
?chmod
getwd()
source('~/UW/Data Science Certificate/What is Data Science/Utility R Files/tryCatchFunction.R')
tryCatchFunction.R 1
source('~/UW/Data Science Certificate/What is Data Science/Utility R Files/tryCatchFunction.R')
tryCatchFunction.R 1
source('~/UW/Data Science Certificate/What is Data Science/Utility R Files/tryCatchFunction.R')
source('~/UW/Data Science Certificate/What is Data Science/Utility R Files/tryCatchFunction.R')

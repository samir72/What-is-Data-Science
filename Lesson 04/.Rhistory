source('~/UW/Data Science Certificate/What is Data Science/Lesson 03/ClassifyStudents.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 03/CollegeStudentsDataset.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 03/ClassifyStudents.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 03/ClassifyStudents.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 03/ClassifyStudents.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 03/CollegeStudentsDataset.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 03/CollegeStudentsDataset.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 03/ClassifyStudents.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 03/CollegeStudentsDataset.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 03/CollegeStudentsDataset.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 03/ClassifyStudents.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 03/CollegeStudentsDataset.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 03/CollegeStudentsDataset.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 03/ClassifyStudents.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 03/ClassifyStudents.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 03/CollegeStudentsDataset.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 03/ClassifyStudents.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 03/ClassifyStudents.R')
TimeTakenFast
source('~/UW/Data Science Certificate/What is Data Science/Lesson 03/CollegeStudentsDataset.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 03/ClassifyStudents.R')
TimeTakenFast
?system.time()
rm(list=ls())
# Clear Console:
cat("\014")
source("CollegeStudentsDataset.R")
# Set repeatable random seed
set.seed(4)
###################################################
# Partition data between training and testing sets
# Replace the following line with a function that partitions the data correctly
#StudentsSplit <- PartitionWrong(Students, fractionOfTest=0.4) # ********** Change here
#StudentsSplit <- PartitionFast(Students, fractionOfTest=0.4) # ********** Change here
TimeTakenFast <- system.time(PartitionFast(Students, fractionOfTest=0.4)) # ********** Change here
#StudentsSplit <- PartitionExact(Students, fractionOfTest=0.4) # ********** Change here
TimeTakenExact <- system.time(PartitionExact(Students, fractionOfTest=0.4)) # ********** Change here
TestStudents <- StudentsSplit$testingData
rm(list=ls())
# Clear Console:
cat("\014")
source("CollegeStudentsDataset.R")
# Set repeatable random seed
set.seed(4)
###################################################
# Partition data between training and testing sets
# Replace the following line with a function that partitions the data correctly
#StudentsSplit <- PartitionWrong(Students, fractionOfTest=0.4) # ********** Change here
#StudentsSplit <- PartitionFast(Students, fractionOfTest=0.4) # ********** Change here
TimeTakenFast <- system.time(PartitionFast(Students, fractionOfTest=0.4)) # ********** Change here
#StudentsSplit <- PartitionExact(Students, fractionOfTest=0.4) # ********** Change here
TimeTakenExact <- system.time(PartitionExact(Students, fractionOfTest=0.4))
TimeTakenFast
TimeTakenExact
source('~/UW/Data Science Certificate/What is Data Science/Lesson 03/CollegeStudentsDataset.R')
rm(list=ls())
# Clear Console:
cat("\014")
source("CollegeStudentsDataset.R")
# Set repeatable random seed
set.seed(4)
###################################################
# Partition data between training and testing sets
# Replace the following line with a function that partitions the data correctly
#StudentsSplit <- PartitionWrong(Students, fractionOfTest=0.4) # ********** Change here
#StudentsSplit <- PartitionFast(Students, fractionOfTest=0.4) # ********** Change here
TimeTakenFast <- system.time(PartitionFast(Students, fractionOfTest=0.4)) # ********** Change here
#StudentsSplit <- PartitionExact(Students, fractionOfTest=0.4) # ********** Change here
TimeTakenExact <- system.time(PartitionExact(Students, fractionOfTest=0.4))
rm(list=ls())
# Clear Console:
cat("\014")
source("CollegeStudentsDataset.R")
# Set repeatable random seed
set.seed(4)
###################################################
# Partition data between training and testing sets
# Replace the following line with a function that partitions the data correctly
#StudentsSplit <- PartitionWrong(Students, fractionOfTest=0.4) # ********** Change here
#StudentsSplit <- PartitionFast(Students, fractionOfTest=0.4) # ********** Change here
TimeTakenFast <- system.time(PartitionFast(Students, fractionOfTest=0.4)) # ********** Change here
#StudentsSplit <- PartitionExact(Students, fractionOfTest=0.4) # ********** Change here
TimeTakenExact <- system.time(PartitionExact(Students, fractionOfTest=0.4)) # ********** Change here
TimeTakenExact
TimeTakenFast
source('~/UW/Data Science Certificate/What is Data Science/Lesson 03/CollegeStudentsDataset.R')
rm(list=ls())
# Clear Console:
cat("\014")
source("CollegeStudentsDataset.R")
# Set repeatable random seed
set.seed(4)
###################################################
# Partition data between training and testing sets
# Replace the following line with a function that partitions the data correctly
#StudentsSplit <- PartitionWrong(Students, fractionOfTest=0.4) # ********** Change here
#StudentsSplit <- PartitionFast(Students, fractionOfTest=0.4) # ********** Change here
TimeTakenFast <- system.time(PartitionFast(Students, fractionOfTest=0.4)) # ********** Change here
#StudentsSplit <- PartitionExact(Students, fractionOfTest=0.4) # ********** Change here
TimeTakenExact <- system.time(PartitionExact(Students, fractionOfTest=0.4)) # ********** Change here
TimeTakenExact
TimeTakenFast
rm(list=ls())
# Clear Console:
cat("\014")
source("CollegeStudentsDataset.R")
# Set repeatable random seed
set.seed(4)
###################################################
# Partition data between training and testing sets
# Replace the following line with a function that partitions the data correctly
#StudentsSplit <- PartitionWrong(Students, fractionOfTest=0.4) # ********** Change here
#StudentsSplit <- PartitionFast(Students, fractionOfTest=0.4) # ********** Change here
TimeTakenFast <- system.time(PartitionFast(Students, fractionOfTest=0.4)) # ********** Change here
#StudentsSplit <- PartitionExact(Students, fractionOfTest=0.4) # ********** Change here
TimeTakenExact <- system.time(PartitionExact(Students, fractionOfTest=0.4)) # ********** Change here
TimeTakenExact
TimeTakenFast
source('~/UW/Data Science Certificate/What is Data Science/Lesson 03/ClassifyStudents.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 04/Assignment#4_1-4.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 04/Assignment#4_1-4.R')
View(Table.X)
View(Table.X)
source('~/UW/Data Science Certificate/What is Data Science/Lesson 04/Assignment#4_1-4.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 04/PatientReadmission.R')
getwd()
setwd("C:/Users/rr657c/Documents/UW/Data Science Certificate/What is Data Science/Lesson 04")
source('~/UW/Data Science Certificate/What is Data Science/Lesson 04/PatientReadmission.R')
?rpart
?predict
prob.NN
predicted.NN
prob.RF
Model.NN
Model.RF
Model.DT
prob.DT
prob.DT[,2]
prob.NN
length(prob.NN)
length(prob.DT)
length(prob.RF)
Table.NN
Table.RF
Table.DT
source('~/UW/Data Science Certificate/What is Data Science/Lesson 04/PatientReadmission.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 04/UtilitiesCofM.R')
source("CollegeStudentsDataset.R")
# Clear objects from Memory
rm(list=ls())
# Clear Console:
cat("\014")
source("UtilitiesCofM.R")
source('~/UW/Data Science Certificate/What is Data Science/Lesson 04/Assignment#4_1-4.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 04/Assignment#4_1-4.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 04/UtilitiesCofM.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 04/Assignment#4_1-4.R')
# Clear objects from Memory
rm(list=ls())
# Clear Console:
cat("\014")
# Clear objects from Memory
rm(list=ls())
# Clear Console:
cat("\014")
source("UtilitiesCofM.R")
#1.Training vs Test Data
#a)In general, for any modeling data, why are accuracy measures better on training data than on test data?
cat("1(a)Answer : Expertly labelled data is used to train the model, this is data which has been primarly used to create the model so it would be logical to have higher accuracy measures on this data. A very high accuracy might not to be a good idea as this could lead to 'Overfitting'.\n")
#b)Given modeling data, how do you determine which of this data will become training data and which data will become test data?
cat("1(b)Answer : Paritioning should be always random to divide the data between training and test data sets.\n")
#c)You have two datasets. You used one to train the model and the other to test the model. You lost the test results and forgot which one you used for training or testing. How can you determine which of these datasets is the testing data?
cat("1(c)Answer : I would rerun the predictions on both training and test data and check the accuracy results.Test data will have a lower accuracy rate than training data.\n")
#2.Beware, this problem contains irrelevant data while some important numbers are not explicitly
#presented. A model was trained on 300 individuals where 149 had the cold and 151 were healthy.
#The model was tested on 100 individuals where 10 were actually ill. The model correctly predicted that 85 of the healthy individuals were indeed healthy and correctly predicted that 7 of the ill individuals were indeed ill. The other predictions were incorrect. Consult Wikipedia: http://en.wikipedia.org/wiki/Precision_and_recall. Present the confusion matrix and the following:
# Create Confusion Matrix.
Table.X <- matrix(c(85, 5, 3, 7), nrow=2)
#Table.X <- matrix(c(7, 3, 5, 85), nrow=2)
Accuracy.X <- Accuracy(Table.X)
Sensitivity.X <- Sensitivity(Table.X)
Specificity.X <- Specificity(Table.X)
Precision.X <- Precision(Table.X)
Recall.X <- Recall(Table.X)
#Accuracy.X <- (Table.X[1,1]+Table.X[2,2])/(Table.X[1,1]+Table.X[1,2]+Table.X[2,1]+Table.X[2,2])
#Sensitivity.X <- (Table.X[1,1])/(Table.X[1,1]+Table.X[2,1])
#Specificity.X <- (Table.X[2,2])/(Table.X[1,2]+Table.X[2,2])
#Precision.X <- (Table.X[1,1])/(Table.X[1,1]+Table.X[1,2])
#Recall.X <- (Table.X[1,1])/(Table.X[1,1]+Table.X[2,1])
cat("2(a)Sensitivity : ", Sensitivity.X)
cat("\n")
cat("2(b)Specificity : ", Specificity.X)
cat("\n")
cat("2(c)Accuracy : ", Accuracy.X)
cat("\n")
cat("2(d)Precision : ", Precision.X)
cat("\n")
cat("2(e)Recall : ", Recall.X)
cat("\n")
#3.The probability threshold for a classification varies in an ROC chart from 0 to 1.
#a)What point of the graph corresponds to a threshold of zero?
cat("3(a) Answer : Bottom left hand corener")
cat("\n")
#b)What point of the graph corresponds to a threshold of one?
cat("3(b) Answer : Top right hand corner")
cat("\n")
#c)What point of the graph corresponds to a threshold of 0.5? (trick question)
cat("3(c) Answer : You cannot guess the point with just the threshold of 0.5")
cat("\n")
#4.A Classification is tested on 1000 cases. In the approximate middle of its ROC chart there is a point where the false positive rate is 0.4, the true positive rate is 0.8, and the accuracy is 0.7.
#a)What does the confusion matrix look like?
#b)What can you say about the probability threshold at that point? (trick question)
Table.Y <- matrix(c(400, 100, 200, 300), nrow=2)
Accuracy.Y <- (Table.Y[1,1]+Table.Y[2,2])/(Table.Y[1,1]+Table.Y[1,2]+Table.Y[2,1]+Table.Y[2,2])
TPR.Y <- (Table.Y[1,1])/(Table.Y[1,1]+Table.Y[2,1])
FPR.Y <- (Table.Y[1,2])/(Table.Y[1,2]+Table.Y[2,2])
cat("4(b): Confusion Matrix")
cat("\n")
print(Table.Y)
cat("4(b)TPR : ", TPR.Y)
cat("\n")
cat("4(b)FPR : ", FPR.Y)
cat("\n")
cat("4(b)Accuracy : ", Accuracy.Y)
cat("\n")
cat("4(b) You cannot guess the threshold by looking at the chart.")
cat("\n")
source('~/UW/Data Science Certificate/What is Data Science/Lesson 04/UtilitiesCofM.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 04/Assignment#4_1-4.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 04/Assignment#4_1-4.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 04/Assignment#4_1-4.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 04/Assignment#4_1-4.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 04/UtilitiesConfM.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 04/Assignment#4_1-4.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 04/PatientReadmission.R')
rm(list=ls())
# Clear Console:
cat("\014")
source("UtilitiesConfM.R")
source('~/UW/Data Science Certificate/What is Data Science/Lesson 04/PatientReadmission.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 04/PatientReadmission.R')
head(prob.NN)
head(predicted.NN)
source('~/UW/Data Science Certificate/What is Data Science/Lesson 04/PatientReadmission.R')
head(predicted.NN)
head(prob.NN)
head(prob.RF)
head(predicted.RF)
head(prob.DT)
head(predicted.DT)
prob.DT[,2]
prob.RF <- predict(Model.RF, newdata=d1, type="prob")
head(prob.RF)
prob.RF[,2]
head(prob.RF[,2])
prob.RF <- predict(Model.RF, newdata=d1, type="prob")[,2]
head(prob.RF)
head(prob.RF[,2])
?nnet
?rpart
plot(Model.DT)
plot(Model.RF)
plot(Model.NN)
plot(Model.RF)
plot(Model.DT)
plot(Model.DT)
text(Model.NN)
text(Model.RF)
text(Model.DT)
View(d2)
View(d2)
?randomForest
Model.RF <- randomForest(formula=ReadmitFx, data=d2)
print(Model.RF)
source('~/UW/Data Science Certificate/What is Data Science/Lesson 04/PatientReadmission.R')
?set.seed
?runif
u <- runif(20)
u
u <- runif(1)
u
set.seed(4)
u <- runif(1)
u
u <- runif(1)
u
set.seed(4)
u
u <- runif(1)
u
u <- runif(1)
u
u <- runif(1)
u
rm(list=ls())
# Clear Console:
cat("\014")
source("CollegeStudentsDataset.R")
getwd()
setwd("C:/Users/rr657c/Documents/UW/Data Science Certificate/What is Data Science/Lesson 03")
rm(list=ls())
# Clear Console:
cat("\014")
source("CollegeStudentsDataset.R")
source('~/UW/Data Science Certificate/What is Data Science/Lesson 03/CollegeStudentsDataset.R')
PartitionExact(Students, fractionOfTest=0.4)
source('~/UW/Data Science Certificate/What is Data Science/Lesson 03/CollegeStudentsDataset.R')
PartitionExact(Students, fractionOfTest=0.4)
source('~/UW/Data Science Certificate/What is Data Science/Lesson 03/CollegeStudentsDataset.R')
PartitionExact(Students, fractionOfTest=0.4)
source('~/UW/Data Science Certificate/What is Data Science/Lesson 03/CollegeStudentsDataset.R')
PartitionExact(Students, fractionOfTest=0.4)
source('~/UW/Data Science Certificate/What is Data Science/Lesson 03/CollegeStudentsDataset.R')
randomForest
?randomForest
getwd()
setwd("C:/Users/rr657c/Documents/UW/Data Science Certificate/What is Data Science/Lesson 04")
source('~/UW/Data Science Certificate/What is Data Science/Lesson 04/PatientReadmission.R')
text(Model.RF)
Model.RF
print(Model.RF)
plot(Model.RF)
prob.RF <- predict(Model.RF, newdata=d1, type="prob")
head(prob.RF)
print(Model.RF)
getTree(Model.RF)
getTree(Model.RF, k=1)
getTree(Model.RF, k=2)
getTree(Model.RF, k=3)
getTree(Model.RF, k=4)
getTree(Model.RF, k=5)
getTree(Model.RF, k=6)
plot(Model.RF)
getTree(Model.RF, k=500)
getTree(Model.RF, k=501)
print(Model.RF)
head(getTree(Model.RF, k=50))
length(getTree(Model.RF, k=50))
getTree(Model.RF, k=501, labelVar = TRUE)
getTree(Model.RF, k=500, labelVar = TRUE)
head(getTree(Model.RF, k=500, labelVar = TRUE))
head(getTree(Model.RF, k=500, labelVar = FALSE))
source('~/UW/Data Science Certificate/What is Data Science/Lesson 04/PatientReadmission.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 04/PatientReadmission.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 04/PatientReadmission.R')
?nnet
prob.NN <- predict(Model.NN, newdata=d1, type="class")
head(prob.NN)
prob.NN <- predict(Model.NN, newdata=d1, type="raw")
head(prob.NN)
which.is.max(prob.NN)
which.is.min(prob.NN)
which.is.max(prob.NN)
max.col(prob.NN)
source('~/UW/Data Science Certificate/What is Data Science/Lesson 04/PatientReadmission.R')
View(prob.NN)
View(prob.NN)
which.is.max(prob.NN)
apply(prob.NN)
apply(prob.NN, 1, which.is.max)
table(true,apply(prob.NN, 1, which.is.max))
table(1,apply(prob.NN, 1, which.is.max))
table(TRUE,apply(prob.NN, 1, which.is.max))
source('~/UW/Data Science Certificate/What is Data Science/Lesson 04/PatientReadmission.R')
table(TRUE,apply(prob.NN, 1, which.is.max))
table(1,apply(prob.NN, 1, which.is.max))
summary(prob.NN)
source('~/UW/Data Science Certificate/What is Data Science/Lesson 04/PatientReadmission.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 04/Assignment#4_1-4.R')
A <- matrix(data=c(1, 1, 1, 1, 1, 0, 0, 1, -0.2, 0, 0.8, 0, 0,-0.6, 0, 0.4), nrow=4, ncol=4, byrow=TRUE)
b <- matrix(data=c(1000, 700, 0, 0), nrow=4, ncol=1, byrow=FALSE)
round(solve(A, b), 4)
#
source('~/UW/Data Science Certificate/What is Data Science/Lesson 04/Assignment#4_1-4.R')
?solve
solve(A, b), 4
A <- matrix(data=c(1, 1, 1, 1, 1, 0, 0, 1, -0.2, 0, 0.8, 0, 0,-0.6, 0, 0.4), nrow=4, ncol=4, byrow=TRUE)
b <- matrix(data=c(1000, 700, 0, 0), nrow=4, ncol=1, byrow=FALSE)
solve(A, b)
round(solve(A, b), 4)
source('~/UW/Data Science Certificate/What is Data Science/Lesson 04/Assignment#4_1-4.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 04/SampleCodeForSolvingMatrcies.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 04/SampleCodeForSolvingMatrcies.R')
A <- hilbert(4)
A[] <- as.complex(A)
## might not be supported on all platforms
try(solve(A))
A <- hilbert(4)
A
View(hilbert)
View(hilbert)
View(hilbert)
View(hilbert)
h8 <- hilbert(8); h8
sh8 <- solve(h8)
round(sh8 %*% h8, 3)
A <- hilbert(4)
A[] <- as.complex(A)
## might not be supported on all platforms
try(solve(A))
h8 <- hilbert(4); h8
sh8 <- solve(h8)
round(sh8 %*% h8, 3)
A <- hilbert(4)
A[] <- as.complex(A)
## might not be supported on all platforms
try(solve(A))
A <- hilbert(4)
solve(A)
source('~/UW/Data Science Certificate/What is Data Science/Lesson 04/SampleCodeForSolvingMatrcies.R')
?outer
x <- 1:9; names(x) <- x
# Multiplication & Power Tables
x %o% x
y <- 2:8; names(y) <- paste(y,":", sep = "")
outer(y, x, "^")
outer(month.abb, 1999:2003, FUN = "paste")
## three way multiplication table:
x %o% x %o% y[1:3]
source('~/UW/Data Science Certificate/What is Data Science/Lesson 04/SampleCodeForSolvingMatrcies.R')
h8 <- hilbert(4); h8
sh8 <- solve(h8)
round(sh8 %*% h8, 3)
library('Matrix')
m1 <- matrix(0, nrow = 1000, ncol = 1000)
m2 <- Matrix(0, nrow = 1000, ncol = 1000, sparse = TRUE)
object.size(m1)
# 8000200 bytes
object.size(m2)
source('~/UW/Data Science Certificate/What is Data Science/Lesson 04/SampleCodeForSolvingMatrcies.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/PregnancyExercise.R')
round(solve(A, b), 4)
solve(A, b)
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/PregnancyExercise.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/PregnancyExercise.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 04/Assignment#4_1-4.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/PregnancyExercise.R')
getwd()
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/PregnancyExercise.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/PregnancyExercise.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/PregnancyExercise.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/PregnancyExercise.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/PregnancyExercise.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/PregnancyExercise.R')
P <- x[1]/(x[1]+x[2])
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/PregnancyExercise.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/PregnancyExercise.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/PregnancyExercise.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/PregnancyExercise.R')
# PregnancyExercise.R
# Copyright 2016 by Ernst Henle
#Clear Workspace
rm(list=ls())
# Clear Console:
cat("\014")
source("UtilitiesConfM.R")
# A pregnancy test correctly predicted pregnancy 80%
# of the time among pregnant women.  10% of all the
# women were predicted pregnant but were actually not
# pregnant. The accuracy of the test was 89%.
# Problem statement
# I  Always:  1TP + 1FP + 1FN + 1TN = 1
# II	 Recall :  TP / (TP + FN) = 0.80;  -2TP+ 0FP + 8FN + 0TN = 0
# III	Accuracy:  (TP + TN)/(TP + FP + TN + FN) = 0.89;  1TP + 0FP + 0FN + 1TN =  0.89
# IV	False Positive:  FP = 0.1; 0TP + 1FP + 0FN + 0TN = 0.1
# Problem statement expressed in terms of linear algebra:
# We want to solve the linear equation:  Ax = b
# Where:
#     A is the matrix
#     x is a vector of TP, FP, FN, TN
#     b is the right-hand side of the linear equation
# --------------    --------
#   matrix A        vector b
# --------------    --------
# TP  FP  FN  TN  | b
# --------------    --------
#  1   1   1   1  |	1
# -2   0   8   0	|	0
#  1   0   0   1	|	0.89
#  0   1   0   0	|	0.1
# --------------    --------
?solve
# A %*% x = b; x <- solve(A, b)
# inv(A) %*% b = x; x <- solve(A) %*% b
# Construct the matrix
#       TP  FP  FN  TN
r1 <- c( 1,  1,  1,  1) # I
r2 <- c(-2,  0,  8,  0) # II
r3 <- c( 1,  0,  0,  1) # III
r4 <- c( 0,  1,  0,  0) # IV
A = matrix(c(r1,r2,r3,r4), ncol=4, byrow=TRUE)
# The right-hand side of the linear system:
# Add code here
b <- c(1,0,0.89,0.1)
# Solve the equation:
?solve
x <- solve(A, b)
print(x)
P <- x[1]/(x[1]+x[2])
cat("Precision ", p)
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/PregnancyExercise.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/PregnancyExercise.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/PregnancyExercise.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 05/PregnancyExercise.R')
install.packages("sqldf")
library(sqldf)
library(sqldf)
install.packages("sqldf")
install.packages("sqldf")
install.packages("sqldf")
?sqldf
install.packages("sqldf")

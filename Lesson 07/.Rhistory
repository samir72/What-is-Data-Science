AdultData <- subset(AdultData, trimws(AdultData[, 11])!="?")
AdultData <- subset(AdultData, trimws(AdultData[, 12])!="?")
AdultData <- subset(AdultData, trimws(AdultData[, 13])!="?")
AdultData <- subset(AdultData, trimws(AdultData[, 14])!="?")
AdultData <- subset(AdultData, trimws(AdultData[, 15])!="?")
# Once the dataset is clean calculate the standard deviation, mean and median using the sapply function.
sapply(AdultData, mean, na.rm=T)
sapply(AdultData, sd, na.rm=T)
sapply(AdultData, median, na.rm=T)
#Item 7: Create histogram for all the numerical attributes with a good heading, X & Y Coordinates.
#Provide names of all attributes causing problem with this function.
hist(AdultData$age, col=rgb(0,1,0,.5), xlab = names(AdultData)[1], main = paste("Histogram of " , names(AdultData)[1]))
hist(AdultData$workclass, col=rgb(0,1,0,.5), xlab = names(AdultData)[2], main = paste("Histogram of " , names(AdultData)[2]))
hist(AdultData$fnlwgt, col=rgb(0,1,0,.5), xlab = names(AdultData)[3], main = paste("Histogram of " , names(AdultData)[3]))
hist(AdultData$education, col=rgb(0,1,0,.5), xlab = names(AdultData)[4], main = paste("Histogram of " , names(AdultData)[4]))
hist(AdultData$`education-num`, col=rgb(0,1,0,.5), xlab = names(AdultData)[5], main = paste("Histogram of " , names(AdultData)[5]))
hist(AdultData$`marital-status`, col=rgb(0,1,0,.5), xlab = names(AdultData)[6], main = paste("Histogram of " , names(AdultData)[6]))
hist(AdultData$occupation, col=rgb(0,1,0,.5), xlab = names(AdultData)[7], main = paste("Histogram of " , names(AdultData)[7]))
hist(AdultData$relationship, col=rgb(0,1,0,.5), xlab = names(AdultData)[8], main = paste("Histogram of " , names(AdultData)[8]))
hist(AdultData$race, col=rgb(0,1,0,.5), xlab = names(AdultData)[9], main = paste("Histogram of " , names(AdultData)[9]))
hist(AdultData$sex, col=rgb(0,1,0,.5), xlab = names(AdultData)[10], main = paste("Histogram of " , names(AdultData)[10]))
hist(AdultData$`capital-gain`, col=rgb(0,1,0,.5), xlab = names(AdultData)[11], main = paste("Histogram of " , names(AdultData)[11]))
hist(AdultData$`capital-loss`, col=rgb(0,1,0,.5), xlab = names(AdultData)[12], main = paste("Histogram of " , names(AdultData)[12]))
hist(AdultData$`hours-per-week`, col=rgb(0,1,0,.5), xlab = names(AdultData)[13], main = paste("Histogram of " , names(AdultData)[13]))
hist(AdultData$`native-country`, col=rgb(0,1,0,.5), xlab = names(AdultData)[14], main = paste("Histogram of " , names(AdultData)[14]))
hist(AdultData$Income, col=rgb(0,1,0,.5), xlab = names(AdultData)[15], main = paste("Histogram of " , names(AdultData)[15]))
#Item 8: Remove all non-numeric attributes from the data frame
AdultData$workclass <- NULL
AdultData$education <- NULL
AdultData$`marital-status` <- NULL
AdultData$occupation <- NULL
AdultData$relationship <- NULL
AdultData$race <- NULL
AdultData$`native-country` <- NULL
AdultData$Income <- NULL
# then take take a random sample of 10% census data to make a scatter plot with all the numeric attributes.
random <-runif(nrow(AdultData))
subsampleflg <- random <= .1
subsample <- AdultData[subsampleflg, ]
#Plot sub-sample of AdultData object.
plot(subsample)
# Item 9: Look at the plots from previous question and answer the following.
# How can you tell if a vector contains binary data?
# Binary data appear as dots in a straight line, plot for sex is a good example.
# What is the relationship between education-num and capital gain ?
# Straight lines with outliers are visible between them.
# Give an example of two vectors that have little correlation
# Education-num and hours per week.
# Item 10: Display outliers in education_num using boxplot and then remove those
# Outliers and show the change in the boxplot.
boxplot(AdultData$`education-num`)
highLimit <- mean(AdultData$`education-num`) + 2*sd(AdultData$`education-num`)
lowLimit <- mean(AdultData$`education-num`) - 2*sd(AdultData$`education-num`)
goodFlag <- (AdultData$`education-num` < highLimit) & (AdultData$`education-num` > lowLimit)
x <- AdultData$`education-num`[goodFlag]
# Compare updated boxplots
boxplot(x, AdultData$`education-num`)
# Replace outliers with mean and see the change in boxplot.
y <- ifelse((AdultData$`education-num` < lowLimit), mean(AdultData$`education-num`), AdultData$`education-num`)
boxplot(y, AdultData$`education-num`)
#Item 11: Relabel categories in attribute race as a new attribute race_label.
#You would have to use the copy of original data from Item 4 as all the character attributes have been removed during the course of this assignment.
AdultData_Copy$race_label <- ifelse(trimws(AdultData_Copy$race) == "White", "W", ifelse(trimws(AdultData_Copy$race) == "Black","B",ifelse(trimws(AdultData_Copy$race) == "Asian-Pac-Islander","API",ifelse(trimws(AdultData_Copy$race) == "Amer-Indian-Eskimo","AIE","O"))))
# Item 12: Normalize fnlwgt vector using Min-Max Normalization.
x <- AdultData$fnlwgt
a <- min(x)
b <- max(x) - min(x)
normalized <- (x - a) / b
# Provide a histogram of normalized vector.
hist(normalized, col=rgb(0,1,0,.5),main = paste("Histogram of fnlwgt using min-max normalization."))
# Item 13: Normalize fnlwgt vector using Z-Score method.
x <- AdultData$fnlwgt
a <- mean(x)
b <- sd(x)
normalized <- (x - a) / b
#	Provide a histogram of normalized vector.
hist(normalized, col=rgb(0,1,0,.5),main = paste("Histogram of fnlwgt using z-score normalization."))
# Item 14: Binarize the relationship Attribute and present the result in a data frame.
x <- AdultData$relationship
isNotFamily <- x == ' Not-in-family'
isHusband <- x == ' Husband'
isWife <- x == ' Wife'
isUnmarried <- x == ' Unmarried'
isOwnChild <- x == ' Own-child'
isOtherrelative <- x == ' Other-relative'
# You can cast True/False into 1/0
isNotFamily <- as.numeric(isNotFamily)
isHusband <- as.numeric(isHusband)
isWife <- as.numeric(isWife)
isUnmarried <- as.numeric(isUnmarried)
isOwnChild <- as.numeric(isOwnChild)
isOtherrelative <- as.numeric(isOtherrelative)
# Presentation as a data frame.
binary_relationship <- data.frame(isNotFamily, isHusband, isWife, isUnmarried, isOwnChild, isOtherrelative)
# Item 15: Discretize age using equal range discretization.
x <- AdultData$age
range <- max(x) - min(x)
binWidth <- range / 3
bin1Min <- -Inf
bin1Max <- min(x) + binWidth
bin2Max <- min(x) + 2*binWidth
bin3Max <- Inf
xDiscretized <- rep(NA, length(x))
xDiscretized[bin1Min < x & x <= bin1Max] <- "L"
xDiscretized[bin1Max < x & x <= bin2Max] <- "M"
xDiscretized[bin2Max < x & x <= bin3Max] <- "H"
# Use table(DiscretizedVector) to summarise the result.
table(xDiscretized)
cat("Discretisized age summary using equal range method:", "\n",table(xDiscretized),"\n" )
# Item 16: Discretize age using equal amount discretization.
x <- AdultData$age
numberOfBins <- 3
vSorted <- sort(x)
binRange <- length(vSorted) / numberOfBins
bin1Min <- -Inf
bin1Max <- vSorted[round(binRange)]
bin2Max <- vSorted[round(2*binRange)]
bin3Max <- +Inf
vdiscretized <- x
vdiscretized[bin1Min < x & x <= bin1Max] <- "L"
vdiscretized[bin1Max < x & x <= bin2Max] <- "M"
vdiscretized[bin2Max < x & x <  bin3Max] <- "H"
#	Use table(DiscretizedVector) to summarise the result.
table(vdiscretized)
cat("Discretisized age summary using equal amount method:", "\n",table(vdiscretized),"\n" )
# Clear Workspace
rm(list=ls())
# Clear Console
cat("\014")
#	Item3: Download census income data from the following location. the file.
#	http://archive.ics.uci.edu/ml/machine-learning-databases/housing/housing.data
url <- "http://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data"
AdultData <- read.table(url, header=FALSE, sep = ",", stringsAsFactors=FALSE)
#	Binarize the sex attribute to a numeric value.
AdultData$V10 <- ifelse(trimws(AdultData$V10) == "Male", 0, 1)
#	Item 4: Add the following headers to the census data.
headers <- c("age", "workclass","fnlwgt","education","education-num","marital-status","occupation","relationship","race","sex","capital-gain","capital-loss","hours-per-week","native-country","Income")
names(AdultData) <- headers
#	Take a copy of this data as we would be using this copy later in the assignment.
AdultData_Copy <- AdultData
# Item 5: Display the first 6 rows of census income data. (This would be excluding the header data).
head(AdultData)
# Item 6: Remove all rows with ‘?’ in any of the attributes.(I am treating ?s as NAs in this Question).
AdultData <- subset(AdultData, trimws(AdultData[, 1])!="?")
AdultData <- subset(AdultData, trimws(AdultData[, 2])!="?")
AdultData <- subset(AdultData, trimws(AdultData[, 3])!="?")
AdultData <- subset(AdultData, trimws(AdultData[, 4])!="?")
AdultData <- subset(AdultData, trimws(AdultData[, 5])!="?")
AdultData <- subset(AdultData, trimws(AdultData[, 6])!="?")
AdultData <- subset(AdultData, trimws(AdultData[, 7])!="?")
AdultData <- subset(AdultData, trimws(AdultData[, 8])!="?")
AdultData <- subset(AdultData, trimws(AdultData[, 9])!="?")
AdultData <- subset(AdultData, trimws(AdultData[, 10])!="?")
AdultData <- subset(AdultData, trimws(AdultData[, 11])!="?")
AdultData <- subset(AdultData, trimws(AdultData[, 12])!="?")
AdultData <- subset(AdultData, trimws(AdultData[, 13])!="?")
AdultData <- subset(AdultData, trimws(AdultData[, 14])!="?")
AdultData <- subset(AdultData, trimws(AdultData[, 15])!="?")
# Once the dataset is clean calculate the standard deviation, mean and median using the sapply function.
sapply(AdultData, mean, na.rm=T)
sapply(AdultData, sd, na.rm=T)
sapply(AdultData, median, na.rm=T)
#Item 7: Create histogram for all the numerical attributes with a good heading, X & Y Coordinates.
#Provide names of all attributes causing problem with this function.
hist(AdultData$age, col=rgb(0,1,0,.5), xlab = names(AdultData)[1], main = paste("Histogram of " , names(AdultData)[1]))
hist(AdultData$workclass, col=rgb(0,1,0,.5), xlab = names(AdultData)[2], main = paste("Histogram of " , names(AdultData)[2]))
hist(AdultData$fnlwgt, col=rgb(0,1,0,.5), xlab = names(AdultData)[3], main = paste("Histogram of " , names(AdultData)[3]))
hist(AdultData$education, col=rgb(0,1,0,.5), xlab = names(AdultData)[4], main = paste("Histogram of " , names(AdultData)[4]))
hist(AdultData$`education-num`, col=rgb(0,1,0,.5), xlab = names(AdultData)[5], main = paste("Histogram of " , names(AdultData)[5]))
hist(AdultData$`marital-status`, col=rgb(0,1,0,.5), xlab = names(AdultData)[6], main = paste("Histogram of " , names(AdultData)[6]))
hist(AdultData$occupation, col=rgb(0,1,0,.5), xlab = names(AdultData)[7], main = paste("Histogram of " , names(AdultData)[7]))
hist(AdultData$relationship, col=rgb(0,1,0,.5), xlab = names(AdultData)[8], main = paste("Histogram of " , names(AdultData)[8]))
hist(AdultData$race, col=rgb(0,1,0,.5), xlab = names(AdultData)[9], main = paste("Histogram of " , names(AdultData)[9]))
hist(AdultData$sex, col=rgb(0,1,0,.5), xlab = names(AdultData)[10], main = paste("Histogram of " , names(AdultData)[10]))
hist(AdultData$`capital-gain`, col=rgb(0,1,0,.5), xlab = names(AdultData)[11], main = paste("Histogram of " , names(AdultData)[11]))
hist(AdultData$`capital-loss`, col=rgb(0,1,0,.5), xlab = names(AdultData)[12], main = paste("Histogram of " , names(AdultData)[12]))
hist(AdultData$`hours-per-week`, col=rgb(0,1,0,.5), xlab = names(AdultData)[13], main = paste("Histogram of " , names(AdultData)[13]))
hist(AdultData$`native-country`, col=rgb(0,1,0,.5), xlab = names(AdultData)[14], main = paste("Histogram of " , names(AdultData)[14]))
hist(AdultData$Income, col=rgb(0,1,0,.5), xlab = names(AdultData)[15], main = paste("Histogram of " , names(AdultData)[15]))
#Item 8: Remove all non-numeric attributes from the data frame
AdultData$workclass <- NULL
AdultData$education <- NULL
AdultData$`marital-status` <- NULL
AdultData$occupation <- NULL
AdultData$relationship <- NULL
AdultData$race <- NULL
AdultData$`native-country` <- NULL
AdultData$Income <- NULL
# then take take a random sample of 10% census data to make a scatter plot with all the numeric attributes.
random <-runif(nrow(AdultData))
subsampleflg <- random <= .1
subsample <- AdultData[subsampleflg, ]
#Plot sub-sample of AdultData object.
plot(subsample)
# Item 9: Look at the plots from previous question and answer the following.
# How can you tell if a vector contains binary data?
# Binary data appear as dots in a straight line, plot for sex is a good example.
# What is the relationship between education-num and capital gain ?
# Straight lines with outliers are visible between them.
# Give an example of two vectors that have little correlation
# Education-num and hours per week.
# Item 10: Display outliers in education_num using boxplot and then remove those
# Outliers and show the change in the boxplot.
boxplot(AdultData$`education-num`)
highLimit <- mean(AdultData$`education-num`) + 2*sd(AdultData$`education-num`)
lowLimit <- mean(AdultData$`education-num`) - 2*sd(AdultData$`education-num`)
goodFlag <- (AdultData$`education-num` < highLimit) & (AdultData$`education-num` > lowLimit)
x <- AdultData$`education-num`[goodFlag]
# Compare updated boxplots
boxplot(x, AdultData$`education-num`)
# Replace outliers with mean and see the change in boxplot.
y <- ifelse((AdultData$`education-num` < lowLimit), mean(AdultData$`education-num`), AdultData$`education-num`)
boxplot(y, AdultData$`education-num`)
#Item 11: Relabel categories in attribute race as a new attribute race_label.
#You would have to use the copy of original data from Item 4 as all the character attributes have been removed during the course of this assignment.
AdultData_Copy$race_label <- ifelse(trimws(AdultData_Copy$race) == "White", "W", ifelse(trimws(AdultData_Copy$race) == "Black","B",ifelse(trimws(AdultData_Copy$race) == "Asian-Pac-Islander","API",ifelse(trimws(AdultData_Copy$race) == "Amer-Indian-Eskimo","AIE","O"))))
# Item 12: Normalize fnlwgt vector using Min-Max Normalization.
x <- AdultData$fnlwgt
a <- min(x)
b <- max(x) - min(x)
normalized <- (x - a) / b
# Provide a histogram of normalized vector.
hist(normalized, col=rgb(0,1,0,.5),main = paste("Histogram of fnlwgt using min-max normalization."))
# Item 13: Normalize fnlwgt vector using Z-Score method.
x <- AdultData$fnlwgt
a <- mean(x)
b <- sd(x)
normalized <- (x - a) / b
#	Provide a histogram of normalized vector.
hist(normalized, col=rgb(0,1,0,.5),main = paste("Histogram of fnlwgt using z-score normalization."))
# Item 14: Binarize the relationship Attribute and present the result in a data frame.
x <- AdultData$relationship
isNotFamily <- x == ' Not-in-family'
isHusband <- x == ' Husband'
isWife <- x == ' Wife'
isUnmarried <- x == ' Unmarried'
isOwnChild <- x == ' Own-child'
isOtherrelative <- x == ' Other-relative'
# You can cast True/False into 1/0
isNotFamily <- as.numeric(isNotFamily)
isHusband <- as.numeric(isHusband)
isWife <- as.numeric(isWife)
isUnmarried <- as.numeric(isUnmarried)
isOwnChild <- as.numeric(isOwnChild)
isOtherrelative <- as.numeric(isOtherrelative)
# Presentation as a data frame.
binary_relationship <- data.frame(isNotFamily, isHusband, isWife, isUnmarried, isOwnChild, isOtherrelative)
# Item 15: Discretize age using equal range discretization.
x <- AdultData$age
range <- max(x) - min(x)
binWidth <- range / 3
bin1Min <- -Inf
bin1Max <- min(x) + binWidth
bin2Max <- min(x) + 2*binWidth
bin3Max <- Inf
xDiscretized <- rep(NA, length(x))
xDiscretized[bin1Min < x & x <= bin1Max] <- "L"
xDiscretized[bin1Max < x & x <= bin2Max] <- "M"
xDiscretized[bin2Max < x & x <= bin3Max] <- "H"
# Use table(DiscretizedVector) to summarise the result.
table(xDiscretized)
cat("Discretisized age summary using equal range method:", "\n",table(xDiscretized),"\n" )
# Item 16: Discretize age using equal amount discretization.
x <- AdultData$age
numberOfBins <- 3
vSorted <- sort(x)
binRange <- length(vSorted) / numberOfBins
bin1Min <- -Inf
bin1Max <- vSorted[round(binRange)]
bin2Max <- vSorted[round(2*binRange)]
bin3Max <- +Inf
vdiscretized <- x
vdiscretized[bin1Min < x & x <= bin1Max] <- "L"
vdiscretized[bin1Max < x & x <= bin2Max] <- "M"
vdiscretized[bin2Max < x & x <  bin3Max] <- "H"
#	Use table(DiscretizedVector) to summarise the result.
table(vdiscretized)
cat("Discretisized age summary using equal amount method:", "\n",table(vdiscretized),"\n" )
setwd("C:\\Users\\rr657c\\Documents\\UW\\Data Science Certificate\\What is Data Science\\Lesson 07")
source(DataPrepAssignment.R)
getwd()
source("DataPrepAssignment.R")
source("DataPrepAssignment.R")
source("DataPrepAssignment.R")
# Clear Workspace
rm(list=ls())
# Clear Console
cat("\014")
#	Item3: Download census income data from the following location. the file.
#	http://archive.ics.uci.edu/ml/machine-learning-databases/housing/housing.data
url <- "http://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data"
AdultData <- read.table(url, header=FALSE, sep = ",", stringsAsFactors=FALSE)
#	Binarize the sex attribute to a numeric value.
AdultData$V10 <- ifelse(trimws(AdultData$V10) == "Male", 0, 1)
# Clear objects from Memory
rm(list=ls())
# Clear Console:
cat("\014")
source("UtilitiesConfM.R")
#1.Training vs Test Data
#a)In general, for any modeling data, why are accuracy measures better on training data than on test data?
cat("1(a)Answer : Expertly labelled data is used to train the model, this is data which has been primarly used to create the model so it would be logical to have higher accuracy measures on this data. A very high accuracy might not to be a good idea as this could lead to 'Overfitting'.\n")
#b)Given modeling data, how do you determine which of this data will become training data and which data will become test data?
cat("1(b)Answer : Paritioning should be always random to divide the data between training and test data sets.\n")
#c)You have two datasets. You used one to train the model and the other to test the model. You lost the test results and forgot which one you used for training or testing. How can you determine which of these datasets is the testing data?
cat("1(c)Answer : I would rerun the predictions on both training and test data and check the accuracy results.Test data will have a lower accuracy rate than training data.\n")
#2.Beware, this problem contains irrelevant data while some important numbers are not explicitly
#presented. A model was trained on 300 individuals where 149 had the cold and 151 were healthy.
#The model was tested on 100 individuals where 10 were actually ill. The model correctly predicted that 85 of the healthy individuals were indeed healthy and correctly predicted that 7 of the ill individuals were indeed ill. The other predictions were incorrect. Consult Wikipedia: http://en.wikipedia.org/wiki/Precision_and_recall. Present the confusion matrix and the following:
# Create Confusion Matrix.
Table.X <- matrix(c(85, 5, 3, 7), nrow=2)
#Table.X <- matrix(c(7, 3, 5, 85), nrow=2)
Accuracy.X <- Accuracy(Table.X)
Sensitivity.X <- Sensitivity(Table.X)
Specificity.X <- Specificity(Table.X)
Precision.X <- Precision(Table.X)
Recall.X <- Recall(Table.X)
#Accuracy.X <- (Table.X[1,1]+Table.X[2,2])/(Table.X[1,1]+Table.X[1,2]+Table.X[2,1]+Table.X[2,2])
#Sensitivity.X <- (Table.X[1,1])/(Table.X[1,1]+Table.X[2,1])
#Specificity.X <- (Table.X[2,2])/(Table.X[1,2]+Table.X[2,2])
#Precision.X <- (Table.X[1,1])/(Table.X[1,1]+Table.X[1,2])
#Recall.X <- (Table.X[1,1])/(Table.X[1,1]+Table.X[2,1])
cat("2(a)Sensitivity : ", Sensitivity.X)
cat("\n")
cat("2(b)Specificity : ", Specificity.X)
cat("\n")
cat("2(c)Accuracy : ", Accuracy.X)
cat("\n")
cat("2(d)Precision : ", Precision.X)
cat("\n")
cat("2(e)Recall : ", Recall.X)
cat("\n")
#3.The probability threshold for a classification varies in an ROC chart from 0 to 1.
#a)What point of the graph corresponds to a threshold of zero?
cat("3(a) Answer : Bottom left hand corener")
cat("\n")
#b)What point of the graph corresponds to a threshold of one?
cat("3(b) Answer : Top right hand corner")
cat("\n")
#c)What point of the graph corresponds to a threshold of 0.5? (trick question)
cat("3(c) Answer : You cannot guess the point with just the threshold of 0.5")
cat("\n")
#4.A Classification is tested on 1000 cases. In the approximate middle of its ROC chart there is a point where the false positive rate is 0.4, the true positive rate is 0.8, and the accuracy is 0.7.
#a)What does the confusion matrix look like?
#b)What can you say about the probability threshold at that point? (trick question)
Table.Y <- matrix(c(400, 100, 200, 300), nrow=2)
Accuracy.Y = Accuracy(Table.Y)
TPR.Y = Sensitivity(Table.Y)
FPR.Y = FPR(Table.Y)
#Accuracy.Y <- (Table.Y[1,1]+Table.Y[2,2])/(Table.Y[1,1]+Table.Y[1,2]+Table.Y[2,1]+Table.Y[2,2])
#TPR.Y <- (Table.Y[1,1])/(Table.Y[1,1]+Table.Y[2,1])
#FPR.Y <- (Table.Y[1,2])/(Table.Y[1,2]+Table.Y[2,2])
cat("4(b): Confusion Matrix")
cat("\n")
print(Table.Y)
#Using R to calculate Confusion matrix
A <- matrix(data=c(1, 1, 1, 1, 1, 0, 0, 1, -0.2, 0, 0.8, 0, 0,-0.6, 0, 0.4), nrow=4, ncol=4, byrow=TRUE)
b <- matrix(data=c(1000, 700, 0, 0), nrow=4, ncol=1, byrow=FALSE)
round(solve(A, b), 4)
#
cat("4(b)TPR : ", TPR.Y)
cat("\n")
cat("4(b)FPR : ", FPR.Y)
cat("\n")
cat("4(b)Accuracy : ", Accuracy.Y)
cat("\n")
cat("4(b) You cannot guess the threshold by looking at the chart.")
cat("\n")
# PatientReadmission.R
# Copyright Ernst Henle 2016
# Previously:
# QuizOnClassification.R
# Clear Workspace
rm(list=ls())
# Clear Console:
cat("\014")
source("UtilitiesConfM.R")
url <- "PatientReadmission.csv"
#url <- "https://www.dropbox.com/s/72sldg5t0jssprx/PatientReadmission.csv?dl=1"
Patients <- read.csv(url, header=TRUE, stringsAsFactors=TRUE)
ReadmitFx <- Readmitted ~ .
# Partition the data the exact way
fractionOfTest=0.25 # do not change
set.seed(2) # do not change
randoms <- runif(nrow(Patients))
cutoff <- quantile(randoms, fractionOfTest)
testFlag <- randoms <= cutoff
testData <- Patients[testFlag, ]
trainData <- Patients[!testFlag, ]
# Get Package
reposURL <- "http://cran.rstudio.com/"
if (!require("randomForest")) {install.packages("randomForest", dep=TRUE, repos=reposURL)} else {" randomForest is already installed "}
# Now that the package is installed, we want to load the package so that we can use its functions
library(randomForest)
if (!require("nnet")) {install.packages("nnet", dep=TRUE, repos=reposURL)} else {" nnet is already installed "}
# Now that the package is installed, we want to load the package so that we can use its functions
library(nnet)
if (!require("rpart")) {install.packages("rpart", dep=TRUE, repos=reposURL)} else {" rpart is already installed "}
# Now that the package is installed, we want to load the package so that we can use its functions
library(rpart)
# Q4:  What is d2? Look ahead a few line to see how it is used
d2 <- trainData # Change this line
# The following lines of code create classifications.
# The classifications are a neural net, a random forest, and a decision tree.
set.seed(4)  # do not change
Model.NN <- nnet(formula=ReadmitFx, data=d2, size=10, maxit=200)
Model.RF <- randomForest(formula=ReadmitFx, data=d2)
Model.DT <- rpart(formula=ReadmitFx, data=d2)
#plot(Model.DT)
#plot(Model.RF)
# Q5:  What is d1? Look ahead a few line to see how it is used
d1 <- testData # Change this line
# The following lines of code calculate probabilities.
# These probabilities will be used to test the accuracy of their respectives models.
prob.NN <- predict(Model.NN, newdata=d1, type="raw")
prob.RF <- predict(Model.RF, newdata=d1, type="prob")[,2]
prob.DT <- predict(Model.DT, newdata=d1, type="prob")[,2]
# Q7 and Q8
# Threshold probabilities to get predictions (see homework solution for examples)
threshold <- 0.6
#actual <- ifelse(testData$Readmitted, "Yes", "No")
actual <- testData$Readmitted
# convert the predicted probabilities to predictions using a threshold
# ********** add code here
predicted.NN <- ifelse(prob.NN > threshold, "Yes", "No")
print(" ")
print(" -------------------------------- ")
print("Confusion Matrix for NN")
# create a table to compare predicted values to actual values
# ********** add code here
Table.NN <- table(predicted.NN,actual,dnn = c("Predicted","Actual"))
print(Table.NN)
#Confusion Matrix for Naive Bayes
# convert the predicted probabilities to predictions using a threshold
# ********** add code here
predicted.RF <- ifelse(prob.RF > threshold, "Yes", "No")
print(" ")
print(" -------------------------------- ")
print("Confusion Matrix RF")
# create a table to compare predicted values to actual values
# ********** add code here
#print(table(predicted.NaiveBayes[,1],actual,dnn = c("Predicted","Actual")))
Table.RF <- table(predicted.RF,actual,dnn = c("Predicted","Actual"))
print(Table.RF)
predicted.DT <- ifelse(prob.DT > threshold, "Yes", "No")
print(" ")
print(" -------------------------------- ")
print("Confusion Matrix DT")
# create a table to compare predicted values to actual values
# ********** add code here
#print(table(predicted.NaiveBayes[,1],actual,dnn = c("Predicted","Actual")))
Table.DT <- table(predicted.DT,actual,dnn = c("Predicted","Actual"))
print(Table.DT)
#Accuracy
#Accuracy.NN <- (Table.NN[1,1]+Table.NN[2,2])/(Table.NN[1,1]+Table.NN[1,2]+Table.NN[2,1]+Table.NN[2,2])
Accuracy.NN <- Accuracy(Table.NN)
print("Accuracy of NN")
print(Accuracy.NN)
Sensitivity.NN <- Sensitivity(Table.NN)
print("Sensitivity of NN")
print(Sensitivity.NN)
FPR.NN <- FPR(Table.NN)
print("FPR of NN")
print(FPR.NN)
# Create a table to compare predicted values to actual values (see homework solution for examples)
#Accuracy.RF <- (Table.RF[1,1]+Table.RF[2,2])/(Table.RF[1,1]+Table.RF[1,2]+Table.RF[2,1]+Table.RF[2,2])
Accuracy.RF <- Accuracy(Table.RF)
print("Accuracy of RF")
print(Accuracy.RF)
Sensitivity.RF <- Sensitivity(Table.RF)
print("Sensitivity of RF")
print(Sensitivity.RF)
FPR.RF <- FPR(Table.RF)
print("FPR of RF")
print(FPR.RF)
# Calculate Accuracy:  Correct/Total (see homework solution for examples)
#Accuracy.DT <- (Table.DT[1,1]+Table.DT[2,2])/(Table.DT[1,1]+Table.DT[1,2]+Table.DT[2,1]+Table.DT[2,2])
Accuracy.DT <- Accuracy(Table.DT)
print("Accuracy of DT")
print(Accuracy.DT)
Sensitivity.DT <- Sensitivity(Table.DT)
print("Sensitivity of DT")
print(Sensitivity.DT)
FPR.DT <- FPR(Table.DT)
print("FPR of DT")
print(FPR.DT)
source("DataPrepAssignment.R")
# Clear Workspace
rm(list=ls())
# Clear Console
cat("\014")
#	Item3: Download census income data from the following location. the file.
#	http://archive.ics.uci.edu/ml/machine-learning-databases/housing/housing.data
#url <- "http://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data"
url <- "http://scg.sdsu.edu/dataset-adult_r/"
AdultData <- read.table(url, header=FALSE, sep = ",", stringsAsFactors=FALSE)
#	Binarize the sex attribute to a numeric value.
AdultData$V10 <- ifelse(trimws(AdultData$V10) == "Male", 0, 1)
View(AdultData)
View(AdultData)
View(AdultData)
View(AdultData)
# Clear Workspace
rm(list=ls())
# Clear Console
cat("\014")
#	Item3: Download census income data from the following location. the file.
#	http://archive.ics.uci.edu/ml/machine-learning-databases/housing/housing.data
url <- "http://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data"
AdultData <- read.table(url, header=FALSE, sep = ",", stringsAsFactors=FALSE)
#	Binarize the sex attribute to a numeric value.
AdultData$V10 <- ifelse(trimws(AdultData$V10) == "Male", 0, 1)

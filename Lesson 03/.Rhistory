head(Students)
formula <- CollegePlans ~ Gender + ParentIncome + IQ + ParentEncouragement
?set.seed
set.seed(4)
PartitionWrong <- function(dataSet, fractionOfTest = 0.3)
{
numberOfRows <- nrow(dataSet)
numberOfTestRows <- fractionOfTest * numberOfRows
testFlag <- 1:numberOfRows <= numberOfTestRows
testingData <- dataSet[testFlag, ]
trainingData <- dataSet[!testFlag, ]
dataSetSplit <- list(trainingData=trainingData, testingData=testingData)
return(dataSetSplit)
}
rm(list=ls())
# Clear Console:
cat("\014")
source("CollegeStudentsDataset_template.R")
# Set repeatable random seed
set.seed(4)
StudentsSplit <- PartitionWrong(Students, fractionOfTest=0.4) # ********** Change here
StudentsSplit <- PartitionWrong(Students, fractionOfTest=0.3) # ********** Change here
StudentsSplit <- PartitionWrong(Students, fractionOfTest=0.5) # ********** Change here
StudentsSplit <- PartitionWrong(Students, fractionOfTest=0.4) # ********** Change here
StudentsSplit
head(StudentsSplit)
head(StudentsSplit)
tail(StudentsSplit)
head(Students)
head(StudentsSplit)
?list
source('~/UW/Data Science Certificate/What is Data Science/Lesson 03/CollegeStudentsDataset_template.R')
StudentsSplit <- PartitionWrong(Students, fractionOfTest=0.4) # ********** Change here
testFlag
View(testingData)
View(testingData)
View(trainingData)
View(trainingData)
testingData
dataSet
TestStudents <- StudentsSplit$testingData
TrainStudents <-StudentsSplit$trainingData
StudentsSplit <- PartitionFast(Students, fractionOfTest=0.4) # ********** Change here
View(TestStudents)
View(TestStudents)
source('~/UW/Data Science Certificate/What is Data Science/Lesson 03/CollegeStudentsDataset_template.R')
StudentsSplit <- PartitionFast(Students, fractionOfTest=0.4) # ********** Change here
random
rm(list=ls())
# Clear Console:
cat("\014")
source("CollegeStudentsDataset_template.R")
# Set repeatable random seed
set.seed(4)
StudentsSplit <- PartitionFast(Students, fractionOfTest=0.4) # ********** Change here
source('~/UW/Data Science Certificate/What is Data Science/Lesson 03/CollegeStudentsDataset_template.R')
StudentsSplit <- PartitionFast(Students, fractionOfTest=0.4) # ********** Change here
?runif
u <- runif(20)
u
v < u <=fractionOfTest
v < u <= fractionOfTest
v <- u <= fractionOfTest
v
v <- u <= .5
v
rm(list=ls())
# Clear Console:
cat("\014")
source("CollegeStudentsDataset_template.R")
# Set repeatable random seed
set.seed(4)
###################################################
# Partition data between training and testing sets
# Replace the following line with a function that partitions the data correctly
StudentsSplit <- PartitionWrong(Students, fractionOfTest=0.4) # ********** Change here
View(testingData)
View(testingData)
StudentsSplit <- PartitionFast(Students, fractionOfTest=0.4) # ********** Change here
StudentsSplit <- PartitionWrong(Students, fractionOfTest=0.4) # ********** Change here
StudentsSplit <- PartitionFast(Students, fractionOfTest=0.4) # ********** Change here
random <-runif(nrow(Students))
quantile(random)
quant <- quantile(random)
quant
quant$50%
quant$
;
head(quant)
quant(3)
quant[1,]
quant[3]
sort(random)
source('~/UW/Data Science Certificate/What is Data Science/Lesson 03/CollegeStudentsDataset_template.R')
testFlag <- random <= fractionOfTest
testFlag <- random <= .3
testFlag
testingData <- dataSet[testFlag, ]
testingData <- Students[testFlag, ]
trainingData <- Students[!testFlag, ]
random <-runif(nrow(Students))
quant <- quantile(random)
quant
?quantile
u <- c('1','2','2,'3','3','4','5','6,'6','7')
u <- c('1','2','2','3','3','4','5','6,'6','7')
u <- c('1','2','2','3','3','4','5','6','6','7')
quantile(u)
u <- c(1,2,3,3,3,4,4,5,6,7,7,7,8,8)
quantile(u)
quantile(u,.1)
quantile(u,.5)
quantile(u,1)
random <-runif(nrow(Students))
testFlag <- random <= .3
testingData <- Students[testFlag, ]
trainingData <- Students[!testFlag, ]
random <-runif(nrow(Students))
quant <- quantile(random)
quantile(random,.3)
random <-runif(nrow(Students))
quant <- quantile(random)
#testFlag <- random <=fractionOfTest
#sort(random)
testFlag <- random <= quantile(random,.3)
testingData <- Students[testFlag, ]
trainingData <- Students[!testFlag, ]
View(testingData)
View(testingData)
View(trainingData)
View(trainingData)
random <-runif(nrow(Students))
quant <- quantile(random,.3)
#testFlag <- random <=fractionOfTest
#sort(random)
testFlag <- random <= quant
random <-runif(nrow(Students))
quant <- quantile(random,.5)
#testFlag <- random <=fractionOfTest
#sort(random)
testFlag <- random <= quant
random <-runif(nrow(Students))
quant <- quantile(random,.6)
#testFlag <- random <=fractionOfTest
#sort(random)
testFlag <- random <= quant
source('~/UW/Data Science Certificate/What is Data Science/Lesson 03/CollegeStudentsDataset_template.R')
rm(list=ls())
# Clear Console:
cat("\014")
source("CollegeStudentsDataset_template.R")
# Set repeatable random seed
set.seed(4)
StudentsSplit <- PartitionWrong(Students, fractionOfTest=0.4) # ********** Change here
StudentsSplit <- PartitionFast(Students, fractionOfTest=0.4) # ********** Change here
source('~/UW/Data Science Certificate/What is Data Science/Lesson 03/CollegeStudentsDataset_template.R')
rm(list=ls())
# Clear Console:
cat("\014")
source("CollegeStudentsDataset_template.R")
# Set repeatable random seed
set.seed(4)
###################################################
# Partition data between training and testing sets
StudentsSplit <- PartitionWrong(Students, fractionOfTest=0.4) # ********** Change here
StudentsSplit <- PartitionFast(Students, fractionOfTest=0.4) # ********** Change here
StudentsSplit <- PartitionExact(Students, fractionOfTest=0.4) # ********** Change here
source('~/UW/Data Science Certificate/What is Data Science/Lesson 03/ClassifyStudents_template.R')
rm(list=ls())
# Clear Console:
cat("\014")
source("CollegeStudentsDataset_template.R")
# Set repeatable random seed
set.seed(4)
###################################################
# Partition data between training and testing sets
# Replace the following line with a function that partitions the data correctly
#StudentsSplit <- PartitionWrong(Students, fractionOfTest=0.4) # ********** Change here
#StudentsSplit <- PartitionFast(Students, fractionOfTest=0.4) # ********** Change here
StudentsSplit <- PartitionExact(Students, fractionOfTest=0.4) # ********** Change here
TestStudents <- StudentsSplit$testingData
TrainStudents <-StudentsSplit$trainingData
###################################################
# Logistic Regression (glm, binomial)
# http://data.princeton.edu/R/glms.html
# http://www.statmethods.net/advstats/glm.html
# http://stat.ethz.ch/R-manual/R-patched/library/stats/html/glm.html
# http://www.stat.umn.edu/geyer/5931/mle/glm.pdf
glmmodel <-glm(formula=formula, family="binomial",data= TrainStudents)
glmmodel
View(TrainStudents)
View(TrainStudents)
glmmodel <-glm(formula=formula, family="gaussian",data= TrainStudents)
glmmodel
glmmodel <-glm(formula=formula, family="binomial",data= TrainStudents)
predictedProbabilities.GLM <- predict(glmmodel,newdata= TestStudents, type = "response")
predictedProbabilities.GLM
TestStudents$CollegePlans
actual <- ifelse(TestStudents$CollegePlans, "Attend", "NotAttend")
threshold <- 0.5
predicted.GLM <- ifelse(predictedProbabilities.GLM > threshold, "Attend", "NotAttend")
print(" ")
print(" -------------------------------- ")
print("Confusion Matrix for Logistic Regression")
# create a table to compare predicted values to actual values
print(table(predicted.GLM,actual,dnn = c("Predicted","Actual")))
?table
print(table(predicted.GLM,actual))
print(table(predicted.GLM,actual,dnn = c("PredictedAmir","ActualAmir")))
TrainStudents$CollegePlans
source('~/UW/Data Science Certificate/What is Data Science/Lesson 03/ClassifyStudents.R')
reposURL <- "http://cran.rstudio.com/"
if (!require("e1071")) {install.packages("e1071", dep=TRUE, repos=reposURL)} else {" e1071 is already installed "}
library(e1071)
source('~/UW/Data Science Certificate/What is Data Science/Lesson 03/ClassifyStudents.R')
NaiveBayesModel <-naiveBayes(formula=formula, data = TrainStudents)
NaiveBayesModel
predictedProbabilities.NaiveBayes <-predict(NaiveBayesModel, newdata = TestStudents, type = "raw")
View(TestStudents)
View(TestStudents)
predictedProbabilities.GLM
glmmodel
source('~/UW/Data Science Certificate/What is Data Science/Lesson 03/ClassifyStudents.R')
predictedProbabilities.NaiveBayes
head(predictedProbabilities.NaiveBayes)
head(predictedProbabilities.GLM)
predicted.NaiveBayes <- ifelse(predictedProbabilities.NaiveBayes > threshold, "Attend", "NotAttend")
print(" ")
print(" -------------------------------- ")
print("Confusion Matrix Naive Bayes")
# create a table to compare predicted values to actual values
# ********** add code here
print(table(predicted.NaiveBayes,actual,dnn = c("Predicted","Actual")))
predicted.NaiveBayes <- ifelse(predictedProbabilities.NaiveBayes > threshold, "Attend", "NotAttend")
View(predicted.NaiveBayes)
print(table(predicted.NaiveBayes,actual,dnn = c("Predicted","Actual")))
predictedProbabilities.NaiveBayes <-predict(NaiveBayesModel, newdata = TestStudents, type = "raw")
rm(list=ls())
# Clear Console:
cat("\014")
source("CollegeStudentsDataset_template.R")
# Set repeatable random seed
set.seed(4)
###################################################
# Partition data between training and testing sets
# Replace the following line with a function that partitions the data correctly
#StudentsSplit <- PartitionWrong(Students, fractionOfTest=0.4) # ********** Change here
#StudentsSplit <- PartitionFast(Students, fractionOfTest=0.4) # ********** Change here
StudentsSplit <- PartitionExact(Students, fractionOfTest=0.4) # ********** Change here
TestStudents <- StudentsSplit$testingData
TrainStudents <-StudentsSplit$trainingData
glmmodel <-glm(formula=formula, family="binomial",data= TrainStudents)
predictedProbabilities.GLM <- predict(glmmodel,newdata= TestStudents, type = "response")
NaiveBayesModel <-naiveBayes(formula=formula, data = TrainStudents)
predictedProbabilities.NaiveBayes <-predict(NaiveBayesModel, newdata = TestStudents, type = "raw")
actual <- ifelse(TestStudents$CollegePlans, "Attend", "NotAttend")
threshold <- 0.5
predicted.GLM <- ifelse(predictedProbabilities.GLM > threshold, "Attend", "NotAttend")
print(" ")
print(" -------------------------------- ")
print("Confusion Matrix for Logistic Regression")
# create a table to compare predicted values to actual values
# ********** add code here
print(table(predicted.GLM,actual,dnn = c("Predicted","Actual")))
predicted.NaiveBayes <- ifelse(predictedProbabilities.NaiveBayes > threshold, "Attend", "NotAttend")
View(predicted.NaiveBayes)
View(predicted.NaiveBayes)
print(table(predicted.NaiveBayes[1,],actual,dnn = c("Predicted","Actual")))
print(table(predicted.NaiveBayes[,1],actual,dnn = c("Predicted","Actual")))
print(table(predicted.NaiveBayes[,2],actual,dnn = c("Predicted","Actual")))
# Clear objects from Memory
rm(list=ls())
# Clear Console:
cat("\014")
source("CollegeStudentsDataset_template.R")
# Set repeatable random seed
set.seed(4)
###################################################
# Partition data between training and testing sets
# Replace the following line with a function that partitions the data correctly
#StudentsSplit <- PartitionWrong(Students, fractionOfTest=0.4) # ********** Change here
#StudentsSplit <- PartitionFast(Students, fractionOfTest=0.4) # ********** Change here
StudentsSplit <- PartitionExact(Students, fractionOfTest=0.4) # ********** Change here
TestStudents <- StudentsSplit$testingData
TrainStudents <-StudentsSplit$trainingData
glmmodel <-glm(formula=formula, family="binomial",data= TrainStudents)
summary(glmmodel)
predictedProbabilities.GLM <- predict(glmmodel,newdata= TestStudents, type = "response")
rm(list=ls())
# Clear Console:
cat("\014")
source("CollegeStudentsDataset_template.R")
# Set repeatable random seed
set.seed(4)
###################################################
# Partition data between training and testing sets
# Replace the following line with a function that partitions the data correctly
StudentsSplit <- PartitionWrong(Students, fractionOfTest=0.4) # ********** Change here
#StudentsSplit <- PartitionFast(Students, fractionOfTest=0.4) # ********** Change here
#StudentsSplit <- PartitionExact(Students, fractionOfTest=0.4) # ********** Change here
TestStudents <- StudentsSplit$testingData
TrainStudents <-StudentsSplit$trainingData
glmmodel <-glm(formula=formula, family="binomial",data= TrainStudents)
glmmodel <-glm(formula=formula, family="binomial",data= TrainStudents)
#glmmodel <-glm(formula=formula, family="gaussian",data= TrainStudents)
# Predict the outcomes for the test data. (predict type="response")
# ********** add code here
predictedProbabilities.GLM <- predict(glmmodel,newdata= TestStudents, type = "response")
###################################################
# Naive Bayes
# http://cran.r-project.org/web/packages/e1071/index.html
# http://cran.r-project.org/web/packages/e1071/e1071.pdf
# Get the algorithm
reposURL <- "http://cran.rstudio.com/"
# install package with naive bayes if not alreay installed
if (!require("e1071")) {install.packages("e1071", dep=TRUE, repos=reposURL)} else {" e1071 is already installed "}
# Now that the package is installed, we want to load the package so that we can use its functions
library(e1071)
# Create Naive Bayes model
# ********** add code here
NaiveBayesModel <-naiveBayes(formula=formula, data = TrainStudents)
# Predict the outcomes for the test data. (predict type="raw")
# ********** add code here
predictedProbabilities.NaiveBayes <-predict(NaiveBayesModel, newdata = TestStudents, type = "raw")
###################################################
# Confusion Matrices
actual <- ifelse(TestStudents$CollegePlans, "Attend", "NotAttend")
threshold <- 0.5
#Confusion Matrix for Logistic Regression
# convert the predicted probabilities to predictions using a threshold
# ********** add code here
predicted.GLM <- ifelse(predictedProbabilities.GLM > threshold, "Attend", "NotAttend")
print(" ")
print(" -------------------------------- ")
print("Confusion Matrix for Logistic Regression")
# create a table to compare predicted values to actual values
# ********** add code here
print(table(predicted.GLM,actual,dnn = c("Predicted","Actual")))
predicted.NaiveBayes <- ifelse(predictedProbabilities.NaiveBayes > threshold, "Attend", "NotAttend")
print(" ")
print(" -------------------------------- ")
print("Confusion Matrix Naive Bayes")
# create a table to compare predicted values to actual values
# ********** add code here
print(table(predicted.NaiveBayes[,1],actual,dnn = c("Predicted","Actual")))
print(table(predicted.NaiveBayes[,2],actual,dnn = c("Predicted","Actual")))
View(predicted.NaiveBayes)
View(predicted.NaiveBayes)
rm(list=ls())
# Clear Console:
cat("\014")
source("CollegeStudentsDataset_template.R")
# Set repeatable random seed
set.seed(4)
###################################################
# Partition data between training and testing sets
# Replace the following line with a function that partitions the data correctly
#StudentsSplit <- PartitionWrong(Students, fractionOfTest=0.4) # ********** Change here
#StudentsSplit <- PartitionFast(Students, fractionOfTest=0.4) # ********** Change here
StudentsSplit <- PartitionExact(Students, fractionOfTest=0.4) # ********** Change here
TestStudents <- StudentsSplit$testingData
TrainStudents <-StudentsSplit$trainingData
###################################################
# Logistic Regression (glm, binomial)
# http://data.princeton.edu/R/glms.html
# http://www.statmethods.net/advstats/glm.html
# http://stat.ethz.ch/R-manual/R-patched/library/stats/html/glm.html
# http://www.stat.umn.edu/geyer/5931/mle/glm.pdf
# Create logistic regression
# ********** add code here
glmmodel <-glm(formula=formula, family="binomial",data= TrainStudents)
#glmmodel <-glm(formula=formula, family="gaussian",data= TrainStudents)
# Predict the outcomes for the test data. (predict type="response")
# ********** add code here
predictedProbabilities.GLM <- predict(glmmodel,newdata= TestStudents, type = "response")
###################################################
# Naive Bayes
# http://cran.r-project.org/web/packages/e1071/index.html
# http://cran.r-project.org/web/packages/e1071/e1071.pdf
# Get the algorithm
reposURL <- "http://cran.rstudio.com/"
# install package with naive bayes if not alreay installed
if (!require("e1071")) {install.packages("e1071", dep=TRUE, repos=reposURL)} else {" e1071 is already installed "}
# Now that the package is installed, we want to load the package so that we can use its functions
library(e1071)
# Create Naive Bayes model
# ********** add code here
NaiveBayesModel <-naiveBayes(formula=formula, data = TrainStudents)
# Predict the outcomes for the test data. (predict type="raw")
# ********** add code here
predictedProbabilities.NaiveBayes <-predict(NaiveBayesModel, newdata = TestStudents, type = "raw")
###################################################
# Confusion Matrices
actual <- ifelse(TestStudents$CollegePlans, "Attend", "NotAttend")
threshold <- 0.5
#Confusion Matrix for Logistic Regression
# convert the predicted probabilities to predictions using a threshold
# ********** add code here
predicted.GLM <- ifelse(predictedProbabilities.GLM > threshold, "Attend", "NotAttend")
print(" ")
print(" -------------------------------- ")
print("Confusion Matrix for Logistic Regression")
# create a table to compare predicted values to actual values
# ********** add code here
print(table(predicted.GLM,actual,dnn = c("Predicted","Actual")))
#Confusion Matrix for Naive Bayes
# convert the predicted probabilities to predictions using a threshold
# ********** add code here
predicted.NaiveBayes <- ifelse(predictedProbabilities.NaiveBayes > threshold, "Attend", "NotAttend")
print(" ")
print(" -------------------------------- ")
print("Confusion Matrix Naive Bayes")
# create a table to compare predicted values to actual values
# ********** add code here
#print(table(predicted.NaiveBayes[,1],actual,dnn = c("Predicted","Actual")))
print(table(predicted.NaiveBayes[,2],actual,dnn = c("Predicted","Actual")))
(687+1706)/(687+260+227+1706)
(570+1724)/(570+377+209+1724)
source('~/UW/Data Science Certificate/What is Data Science/Lesson 03/ClassifyStudents.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 03/ClassifyStudents.R')
(691+1715)/(691+262+227+1715)
(572+1731)/(572+381+211+1731)
source('~/UW/Data Science Certificate/What is Data Science/Lesson 03/ClassifyStudents.R')
(425+1852)/(498+449+81+1852)
(425+1833)/(425+522+100+1833)
source('~/UW/Data Science Certificate/What is Data Science/Lesson 03/ClassifyStudents.R')
View(predicted.NaiveBayes)
View(predicted.NaiveBayes)
rm(list=ls())
# Clear Console:
cat("\014")
source("CollegeStudentsDataset_template.R")
# Set repeatable random seed
set.seed(4)
###################################################
# Partition data between training and testing sets
# Replace the following line with a function that partitions the data correctly
#StudentsSplit <- PartitionWrong(Students, fractionOfTest=0.4) # ********** Change here
#StudentsSplit <- PartitionFast(Students, fractionOfTest=0.4) # ********** Change here
StudentsSplit <- PartitionExact(Students, fractionOfTest=0.3) # ********** Change here
TestStudents <- StudentsSplit$testingData
TrainStudents <-StudentsSplit$trainingData
###################################################
# Logistic Regression (glm, binomial)
# http://data.princeton.edu/R/glms.html
# http://www.statmethods.net/advstats/glm.html
# http://stat.ethz.ch/R-manual/R-patched/library/stats/html/glm.html
# http://www.stat.umn.edu/geyer/5931/mle/glm.pdf
# Create logistic regression
# ********** add code here
glmmodel <-glm(formula=formula, family="binomial",data= TrainStudents)
#glmmodel <-glm(formula=formula, family="gaussian",data= TrainStudents)
# Predict the outcomes for the test data. (predict type="response")
# ********** add code here
predictedProbabilities.GLM <- predict(glmmodel,newdata= TestStudents, type = "response")
reposURL <- "http://cran.rstudio.com/"
# install package with naive bayes if not alreay installed
if (!require("e1071")) {install.packages("e1071", dep=TRUE, repos=reposURL)} else {" e1071 is already installed "}
# Now that the package is installed, we want to load the package so that we can use its functions
library(e1071)
# Create Naive Bayes model
# ********** add code here
NaiveBayesModel <-naiveBayes(formula=formula, data = TrainStudents)
# Predict the outcomes for the test data. (predict type="raw")
# ********** add code here
predictedProbabilities.NaiveBayes <-predict(NaiveBayesModel, newdata = TestStudents, type = "raw")
source('~/UW/Data Science Certificate/What is Data Science/Lesson 03/ClassifyStudents.R')
rm(list=ls())
# Clear Console:
cat("\014")
source("CollegeStudentsDataset_template.R")
# Set repeatable random seed
set.seed(4)
StudentsSplit <- PartitionExact(Students, fractionOfTest=0.4) # ********** Change here
NaiveBayesModel <-naiveBayes(formula=formula, data = TrainStudents)
# Predict the outcomes for the test data. (predict type="raw")
# ********** add code here
predictedProbabilities.NaiveBayes <-predict(NaiveBayesModel, newdata = TestStudents, type = "raw")
rm(list=ls())
# Clear Console:
cat("\014")
source("CollegeStudentsDataset_template.R")
# Set repeatable random seed
set.seed(4)
###################################################
# Partition data between training and testing sets
# Replace the following line with a function that partitions the data correctly
#StudentsSplit <- PartitionWrong(Students, fractionOfTest=0.4) # ********** Change here
#StudentsSplit <- PartitionFast(Students, fractionOfTest=0.4) # ********** Change here
StudentsSplit <- PartitionExact(Students, fractionOfTest=0.4) # ********** Change here
TestStudents <- StudentsSplit$testingData
TrainStudents <-StudentsSplit$trainingData
NaiveBayesModel <-naiveBayes(formula=formula, data = TrainStudents)
# Predict the outcomes for the test data. (predict type="raw")
# ********** add code here
predictedProbabilities.NaiveBayes <-predict(NaiveBayesModel, newdata = TestStudents, type = "raw")
View(predictedProbabilities.NaiveBayes)
View(predictedProbabilities.NaiveBayes)
source('~/UW/Data Science Certificate/What is Data Science/Lesson 03/ClassifyStudents.R')
?glm
predictedProbabilities.GLM
source('~/UW/Data Science Certificate/What is Data Science/Lesson 03/ClassifyStudents.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 03/ClassifyStudents.R')
(498+1852)/(498+449+81+1852)
(425+1833)/(425+522+100+1833)
source('~/UW/Data Science Certificate/What is Data Science/Lesson 03/ClassifyStudents.R')
source('~/UW/Data Science Certificate/What is Data Science/Lesson 03/ClassifyStudents.R')
(687+1706)/(687+260+227+1706)
(570+1724)/(570+377+209+1724)
source('~/UW/Data Science Certificate/What is Data Science/Lesson 03/ClassifyStudents.R')
(691+1715)/(691+262+227+1715)
(572+1731)/(572+381+211+1731)
